/*
 * NiFi Rest API
 *
 * The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: dev@nifi.apache.org
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};


/// struct for typed errors of method [`commit_input_port_transaction`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CommitInputPortTransactionError {
    Status400(),
    Status401(),
    Status403(),
    Status404(),
    Status409(),
    Status503(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`commit_output_port_transaction`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CommitOutputPortTransactionError {
    Status400(),
    Status401(),
    Status403(),
    Status404(),
    Status409(),
    Status503(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`create_port_transaction`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreatePortTransactionError {
    Status400(),
    Status401(),
    Status403(),
    Status404(),
    Status409(),
    Status503(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`extend_input_port_transaction_ttl`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtendInputPortTransactionTtlError {
    Status400(),
    Status401(),
    Status403(),
    Status404(),
    Status409(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`extend_output_port_transaction_ttl`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtendOutputPortTransactionTtlError {
    Status400(),
    Status401(),
    Status403(),
    Status404(),
    Status409(),
    Status503(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`receive_flow_files`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ReceiveFlowFilesError {
    Status400(),
    Status401(),
    Status403(),
    Status404(),
    Status409(),
    Status503(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`transfer_flow_files`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TransferFlowFilesError {
    Status400(),
    Status401(),
    Status403(),
    Status404(),
    Status409(),
    Status503(),
    UnknownValue(serde_json::Value),
}


pub async fn commit_input_port_transaction(configuration: &configuration::Configuration, response_code: i32, port_id: &str, transaction_id: &str) -> Result<crate::models::TransactionResultEntity, Error<CommitInputPortTransactionError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/data-transfer/input-ports/{portId}/transactions/{transactionId}", local_var_configuration.base_path, portId=crate::apis::urlencode(port_id), transactionId=crate::apis::urlencode(transaction_id));
    let mut local_var_req_builder = local_var_configuration.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("responseCode", &response_code.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CommitInputPortTransactionError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn commit_output_port_transaction(configuration: &configuration::Configuration, response_code: i32, checksum: &str, port_id: &str, transaction_id: &str) -> Result<crate::models::TransactionResultEntity, Error<CommitOutputPortTransactionError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/data-transfer/output-ports/{portId}/transactions/{transactionId}", local_var_configuration.base_path, portId=crate::apis::urlencode(port_id), transactionId=crate::apis::urlencode(transaction_id));
    let mut local_var_req_builder = local_var_configuration.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("responseCode", &response_code.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("checksum", &checksum.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CommitOutputPortTransactionError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn create_port_transaction(configuration: &configuration::Configuration, port_type: &str, port_id: &str) -> Result<crate::models::TransactionResultEntity, Error<CreatePortTransactionError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/data-transfer/{portType}/{portId}/transactions", local_var_configuration.base_path, portType=crate::apis::urlencode(port_type), portId=crate::apis::urlencode(port_id));
    let mut local_var_req_builder = local_var_configuration.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CreatePortTransactionError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn extend_input_port_transaction_ttl(configuration: &configuration::Configuration, port_id: &str, transaction_id: &str) -> Result<crate::models::TransactionResultEntity, Error<ExtendInputPortTransactionTtlError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/data-transfer/input-ports/{portId}/transactions/{transactionId}", local_var_configuration.base_path, portId=crate::apis::urlencode(port_id), transactionId=crate::apis::urlencode(transaction_id));
    let mut local_var_req_builder = local_var_configuration.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ExtendInputPortTransactionTtlError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn extend_output_port_transaction_ttl(configuration: &configuration::Configuration, port_id: &str, transaction_id: &str) -> Result<crate::models::TransactionResultEntity, Error<ExtendOutputPortTransactionTtlError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/data-transfer/output-ports/{portId}/transactions/{transactionId}", local_var_configuration.base_path, portId=crate::apis::urlencode(port_id), transactionId=crate::apis::urlencode(transaction_id));
    let mut local_var_req_builder = local_var_configuration.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ExtendOutputPortTransactionTtlError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn receive_flow_files(configuration: &configuration::Configuration, port_id: &str, transaction_id: &str) -> Result<String, Error<ReceiveFlowFilesError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/data-transfer/input-ports/{portId}/transactions/{transactionId}/flow-files", local_var_configuration.base_path, portId=crate::apis::urlencode(port_id), transactionId=crate::apis::urlencode(transaction_id));
    let mut local_var_req_builder = local_var_configuration.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ReceiveFlowFilesError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn transfer_flow_files(configuration: &configuration::Configuration, port_id: &str, transaction_id: &str) -> Result<serde_json::Value, Error<TransferFlowFilesError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/data-transfer/output-ports/{portId}/transactions/{transactionId}/flow-files", local_var_configuration.base_path, portId=crate::apis::urlencode(port_id), transactionId=crate::apis::urlencode(transaction_id));
    let mut local_var_req_builder = local_var_configuration.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<TransferFlowFilesError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

