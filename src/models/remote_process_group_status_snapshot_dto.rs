/*
 * NiFi Rest API
 *
 * The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: dev@nifi.apache.org
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct RemoteProcessGroupStatusSnapshotDto {
    /// The id of the remote process group.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The id of the parent process group the remote process group resides in.
    #[serde(rename = "groupId", skip_serializing_if = "Option::is_none")]
    pub group_id: Option<String>,
    /// The name of the remote process group.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The URI of the target system.
    #[serde(rename = "targetUri", skip_serializing_if = "Option::is_none")]
    pub target_uri: Option<String>,
    /// The transmission status of the remote process group.
    #[serde(rename = "transmissionStatus", skip_serializing_if = "Option::is_none")]
    pub transmission_status: Option<String>,
    /// The number of active threads for the remote process group.
    #[serde(rename = "activeThreadCount", skip_serializing_if = "Option::is_none")]
    pub active_thread_count: Option<i32>,
    /// The number of FlowFiles sent to the remote process group in the last 5 minutes.
    #[serde(rename = "flowFilesSent", skip_serializing_if = "Option::is_none")]
    pub flow_files_sent: Option<i32>,
    /// The size of the FlowFiles sent to the remote process group in the last 5 minutes.
    #[serde(rename = "bytesSent", skip_serializing_if = "Option::is_none")]
    pub bytes_sent: Option<i64>,
    /// The count/size of the flowfiles sent to the remote process group in the last 5 minutes.
    #[serde(rename = "sent", skip_serializing_if = "Option::is_none")]
    pub sent: Option<String>,
    /// The number of FlowFiles received from the remote process group in the last 5 minutes.
    #[serde(rename = "flowFilesReceived", skip_serializing_if = "Option::is_none")]
    pub flow_files_received: Option<i32>,
    /// The size of the FlowFiles received from the remote process group in the last 5 minutes.
    #[serde(rename = "bytesReceived", skip_serializing_if = "Option::is_none")]
    pub bytes_received: Option<i64>,
    /// The count/size of the flowfiles received from the remote process group in the last 5 minutes.
    #[serde(rename = "received", skip_serializing_if = "Option::is_none")]
    pub received: Option<String>,
}

impl RemoteProcessGroupStatusSnapshotDto {
    pub fn new() -> RemoteProcessGroupStatusSnapshotDto {
        RemoteProcessGroupStatusSnapshotDto {
            id: None,
            group_id: None,
            name: None,
            target_uri: None,
            transmission_status: None,
            active_thread_count: None,
            flow_files_sent: None,
            bytes_sent: None,
            sent: None,
            flow_files_received: None,
            bytes_received: None,
            received: None,
        }
    }
}


