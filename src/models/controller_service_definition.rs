/*
 * NiFi Rest API
 *
 * The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: dev@nifi.apache.org
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ControllerServiceDefinition {
    /// The group name of the bundle that provides the referenced type.
    #[serde(rename = "group", skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    /// The artifact name of the bundle that provides the referenced type.
    #[serde(rename = "artifact", skip_serializing_if = "Option::is_none")]
    pub artifact: Option<String>,
    /// The version of the bundle that provides the referenced type.
    #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
    /// The fully-qualified class type
    #[serde(rename = "type")]
    pub _type: String,
    /// The description of the type.
    #[serde(rename = "typeDescription", skip_serializing_if = "Option::is_none")]
    pub type_description: Option<String>,
    #[serde(rename = "buildInfo", skip_serializing_if = "Option::is_none")]
    pub build_info: Option<Box<crate::models::BuildInfo>>,
    /// If this type represents a provider for an interface, this lists the APIs it implements
    #[serde(rename = "providedApiImplementations", skip_serializing_if = "Option::is_none")]
    pub provided_api_implementations: Option<Vec<crate::models::DefinedType>>,
    /// The tags associated with this type
    #[serde(rename = "tags", skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<String>>,
    /// Whether or not the component has been deprecated
    #[serde(rename = "deprecated", skip_serializing_if = "Option::is_none")]
    pub deprecated: Option<bool>,
    /// If this component has been deprecated, this optional field can be used to provide an explanation
    #[serde(rename = "deprecationReason", skip_serializing_if = "Option::is_none")]
    pub deprecation_reason: Option<String>,
    /// Descriptions of configuration properties applicable to this component.
    #[serde(rename = "propertyDescriptors", skip_serializing_if = "Option::is_none")]
    pub property_descriptors: Option<::std::collections::HashMap<String, crate::models::PropertyDescriptor>>,
    /// Whether or not this component makes use of dynamic (user-set) properties.
    #[serde(rename = "supportsDynamicProperties", skip_serializing_if = "Option::is_none")]
    pub supports_dynamic_properties: Option<bool>,
}

impl ControllerServiceDefinition {
    pub fn new(_type: String) -> ControllerServiceDefinition {
        ControllerServiceDefinition {
            group: None,
            artifact: None,
            version: None,
            _type,
            type_description: None,
            build_info: None,
            provided_api_implementations: None,
            tags: None,
            deprecated: None,
            deprecation_reason: None,
            property_descriptors: None,
            supports_dynamic_properties: None,
        }
    }
}


