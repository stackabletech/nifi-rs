/*
 * NiFi Rest API
 *
 * The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: dev@nifi.apache.org
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct PropertyDescriptorDto {
    /// The name for the property.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The human readable name for the property.
    #[serde(rename = "displayName", skip_serializing_if = "Option::is_none")]
    pub display_name: Option<String>,
    /// The description for the property. Used to relay additional details to a user or provide a mechanism of documenting intent.
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The default value for the property.
    #[serde(rename = "defaultValue", skip_serializing_if = "Option::is_none")]
    pub default_value: Option<String>,
    /// Allowable values for the property. If empty then the allowed values are not constrained.
    #[serde(rename = "allowableValues", skip_serializing_if = "Option::is_none")]
    pub allowable_values: Option<Vec<crate::models::AllowableValueEntity>>,
    /// Whether the property is required.
    #[serde(rename = "required", skip_serializing_if = "Option::is_none")]
    pub required: Option<bool>,
    /// Whether the property is sensitive and protected whenever stored or represented.
    #[serde(rename = "sensitive", skip_serializing_if = "Option::is_none")]
    pub sensitive: Option<bool>,
    /// Whether the property is dynamic (user-defined).
    #[serde(rename = "dynamic", skip_serializing_if = "Option::is_none")]
    pub dynamic: Option<bool>,
    /// Whether the property supports expression language.
    #[serde(rename = "supportsEl", skip_serializing_if = "Option::is_none")]
    pub supports_el: Option<bool>,
    /// Scope of the Expression Language evaluation for the property.
    #[serde(rename = "expressionLanguageScope", skip_serializing_if = "Option::is_none")]
    pub expression_language_scope: Option<String>,
    /// If the property identifies a controller service this returns the fully qualified type.
    #[serde(rename = "identifiesControllerService", skip_serializing_if = "Option::is_none")]
    pub identifies_controller_service: Option<String>,
    #[serde(rename = "identifiesControllerServiceBundle", skip_serializing_if = "Option::is_none")]
    pub identifies_controller_service_bundle: Option<Box<crate::models::BundleDto>>,
    /// A list of dependencies that must be met in order for this Property to be relevant. If any of these dependencies is not met, the property described by this Property Descriptor is not relevant.
    #[serde(rename = "dependencies", skip_serializing_if = "Option::is_none")]
    pub dependencies: Option<Vec<crate::models::PropertyDependencyDto>>,
}

impl PropertyDescriptorDto {
    pub fn new() -> PropertyDescriptorDto {
        PropertyDescriptorDto {
            name: None,
            display_name: None,
            description: None,
            default_value: None,
            allowable_values: None,
            required: None,
            sensitive: None,
            dynamic: None,
            supports_el: None,
            expression_language_scope: None,
            identifies_controller_service: None,
            identifies_controller_service_bundle: None,
            dependencies: None,
        }
    }
}


