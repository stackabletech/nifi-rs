/*
 * NiFi Rest API
 *
 * The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: dev@nifi.apache.org
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct VersionedResourceDefinition {
    /// The cardinality of the resource
    #[serde(rename = "cardinality", skip_serializing_if = "Option::is_none")]
    pub cardinality: Option<Cardinality>,
    /// The types of resource that the Property Descriptor is allowed to reference
    #[serde(rename = "resourceTypes", skip_serializing_if = "Option::is_none")]
    pub resource_types: Option<std::collections::HashSet<ResourceTypes>>,
}

impl VersionedResourceDefinition {
    pub fn new() -> VersionedResourceDefinition {
        VersionedResourceDefinition {
            cardinality: None,
            resource_types: None,
        }
    }
}

/// The cardinality of the resource
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Cardinality {
    #[serde(rename = "SINGLE")]
    SINGLE,
    #[serde(rename = "MULTIPLE")]
    MULTIPLE,
}

impl Default for Cardinality {
    fn default() -> Cardinality {
        Self::SINGLE
    }
}
/// The types of resource that the Property Descriptor is allowed to reference
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ResourceTypes {
    #[serde(rename = "FILE")]
    FILE,
    #[serde(rename = "DIRECTORY")]
    DIRECTORY,
    #[serde(rename = "TEXT")]
    TEXT,
    #[serde(rename = "URL")]
    URL,
}

impl Default for ResourceTypes {
    fn default() -> ResourceTypes {
        Self::FILE
    }
}

