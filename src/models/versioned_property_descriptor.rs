/*
 * NiFi Rest API
 *
 * The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: dev@nifi.apache.org
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct VersionedPropertyDescriptor {
    /// The name of the property
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The display name of the property
    #[serde(rename = "displayName", skip_serializing_if = "Option::is_none")]
    pub display_name: Option<String>,
    /// Whether or not the property provides the identifier of a Controller Service
    #[serde(rename = "identifiesControllerService", skip_serializing_if = "Option::is_none")]
    pub identifies_controller_service: Option<bool>,
    /// Whether or not the property is considered sensitive
    #[serde(rename = "sensitive", skip_serializing_if = "Option::is_none")]
    pub sensitive: Option<bool>,
    #[serde(rename = "resourceDefinition", skip_serializing_if = "Option::is_none")]
    pub resource_definition: Option<Box<crate::models::VersionedResourceDefinition>>,
}

impl VersionedPropertyDescriptor {
    pub fn new() -> VersionedPropertyDescriptor {
        VersionedPropertyDescriptor {
            name: None,
            display_name: None,
            identifies_controller_service: None,
            sensitive: None,
            resource_definition: None,
        }
    }
}


