/*
 * NiFi Rest API
 *
 * The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: dev@nifi.apache.org
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct RemoteProcessGroupDto {
    /// The id of the component.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The ID of the corresponding component that is under version control
    #[serde(rename = "versionedComponentId", skip_serializing_if = "Option::is_none")]
    pub versioned_component_id: Option<String>,
    /// The id of parent process group of this component if applicable.
    #[serde(rename = "parentGroupId", skip_serializing_if = "Option::is_none")]
    pub parent_group_id: Option<String>,
    #[serde(rename = "position", skip_serializing_if = "Option::is_none")]
    pub position: Option<Box<crate::models::PositionDto>>,
    /// The target URI of the remote process group. If target uri is not set, but uris are set, then returns the first url in the urls. If neither target uri nor uris are set, then returns null.
    #[serde(rename = "targetUri", skip_serializing_if = "Option::is_none")]
    pub target_uri: Option<String>,
    /// The target URI of the remote process group. If target uris is not set but target uri is set, then returns a collection containing the single target uri. If neither target uris nor uris are set, then returns null.
    #[serde(rename = "targetUris", skip_serializing_if = "Option::is_none")]
    pub target_uris: Option<String>,
    /// Whether the target is running securely.
    #[serde(rename = "targetSecure", skip_serializing_if = "Option::is_none")]
    pub target_secure: Option<bool>,
    /// The name of the remote process group.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The comments for the remote process group.
    #[serde(rename = "comments", skip_serializing_if = "Option::is_none")]
    pub comments: Option<String>,
    /// The time period used for the timeout when communicating with the target.
    #[serde(rename = "communicationsTimeout", skip_serializing_if = "Option::is_none")]
    pub communications_timeout: Option<String>,
    /// When yielding, this amount of time must elapse before the remote process group is scheduled again.
    #[serde(rename = "yieldDuration", skip_serializing_if = "Option::is_none")]
    pub yield_duration: Option<String>,
    #[serde(rename = "transportProtocol", skip_serializing_if = "Option::is_none")]
    pub transport_protocol: Option<String>,
    /// The local network interface to send/receive data. If not specified, any local address is used. If clustered, all nodes must have an interface with this identifier.
    #[serde(rename = "localNetworkInterface", skip_serializing_if = "Option::is_none")]
    pub local_network_interface: Option<String>,
    #[serde(rename = "proxyHost", skip_serializing_if = "Option::is_none")]
    pub proxy_host: Option<String>,
    #[serde(rename = "proxyPort", skip_serializing_if = "Option::is_none")]
    pub proxy_port: Option<i32>,
    #[serde(rename = "proxyUser", skip_serializing_if = "Option::is_none")]
    pub proxy_user: Option<String>,
    #[serde(rename = "proxyPassword", skip_serializing_if = "Option::is_none")]
    pub proxy_password: Option<String>,
    /// Any remote authorization issues for the remote process group.
    #[serde(rename = "authorizationIssues", skip_serializing_if = "Option::is_none")]
    pub authorization_issues: Option<Vec<String>>,
    /// The validation errors for the remote process group. These validation errors represent the problems with the remote process group that must be resolved before it can transmit.
    #[serde(rename = "validationErrors", skip_serializing_if = "Option::is_none")]
    pub validation_errors: Option<Vec<String>>,
    /// Whether the remote process group is actively transmitting.
    #[serde(rename = "transmitting", skip_serializing_if = "Option::is_none")]
    pub transmitting: Option<bool>,
    /// The number of remote input ports currently available on the target.
    #[serde(rename = "inputPortCount", skip_serializing_if = "Option::is_none")]
    pub input_port_count: Option<i32>,
    /// The number of remote output ports currently available on the target.
    #[serde(rename = "outputPortCount", skip_serializing_if = "Option::is_none")]
    pub output_port_count: Option<i32>,
    /// The number of active remote input ports.
    #[serde(rename = "activeRemoteInputPortCount", skip_serializing_if = "Option::is_none")]
    pub active_remote_input_port_count: Option<i32>,
    /// The number of inactive remote input ports.
    #[serde(rename = "inactiveRemoteInputPortCount", skip_serializing_if = "Option::is_none")]
    pub inactive_remote_input_port_count: Option<i32>,
    /// The number of active remote output ports.
    #[serde(rename = "activeRemoteOutputPortCount", skip_serializing_if = "Option::is_none")]
    pub active_remote_output_port_count: Option<i32>,
    /// The number of inactive remote output ports.
    #[serde(rename = "inactiveRemoteOutputPortCount", skip_serializing_if = "Option::is_none")]
    pub inactive_remote_output_port_count: Option<i32>,
    /// The timestamp when this remote process group was last refreshed.
    #[serde(rename = "flowRefreshed", skip_serializing_if = "Option::is_none")]
    pub flow_refreshed: Option<String>,
    #[serde(rename = "contents", skip_serializing_if = "Option::is_none")]
    pub contents: Option<Box<crate::models::RemoteProcessGroupContentsDto>>,
}

impl RemoteProcessGroupDto {
    pub fn new() -> RemoteProcessGroupDto {
        RemoteProcessGroupDto {
            id: None,
            versioned_component_id: None,
            parent_group_id: None,
            position: None,
            target_uri: None,
            target_uris: None,
            target_secure: None,
            name: None,
            comments: None,
            communications_timeout: None,
            yield_duration: None,
            transport_protocol: None,
            local_network_interface: None,
            proxy_host: None,
            proxy_port: None,
            proxy_user: None,
            proxy_password: None,
            authorization_issues: None,
            validation_errors: None,
            transmitting: None,
            input_port_count: None,
            output_port_count: None,
            active_remote_input_port_count: None,
            inactive_remote_input_port_count: None,
            active_remote_output_port_count: None,
            inactive_remote_output_port_count: None,
            flow_refreshed: None,
            contents: None,
        }
    }
}


