/*
 * NiFi Rest API
 *
 * The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: dev@nifi.apache.org
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct NodeStatusSnapshotsDto {
    /// The id of the node.
    #[serde(rename = "nodeId", skip_serializing_if = "Option::is_none")]
    pub node_id: Option<String>,
    /// The node's host/ip address.
    #[serde(rename = "address", skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
    /// The port the node is listening for API requests.
    #[serde(rename = "apiPort", skip_serializing_if = "Option::is_none")]
    pub api_port: Option<i32>,
    /// A list of StatusSnapshotDTO objects that provide the actual metric values for the component for this node.
    #[serde(rename = "statusSnapshots", skip_serializing_if = "Option::is_none")]
    pub status_snapshots: Option<Vec<crate::models::StatusSnapshotDto>>,
}

impl NodeStatusSnapshotsDto {
    pub fn new() -> NodeStatusSnapshotsDto {
        NodeStatusSnapshotsDto {
            node_id: None,
            address: None,
            api_port: None,
            status_snapshots: None,
        }
    }
}


