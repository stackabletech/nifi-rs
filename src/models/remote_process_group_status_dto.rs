/*
 * NiFi Rest API
 *
 * The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: dev@nifi.apache.org
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct RemoteProcessGroupStatusDto {
    /// The unique ID of the process group that the Processor belongs to
    #[serde(rename = "groupId", skip_serializing_if = "Option::is_none")]
    pub group_id: Option<String>,
    /// The unique ID of the Processor
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The name of the remote process group.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The URI of the target system.
    #[serde(rename = "targetUri", skip_serializing_if = "Option::is_none")]
    pub target_uri: Option<String>,
    /// The transmission status of the remote process group.
    #[serde(rename = "transmissionStatus", skip_serializing_if = "Option::is_none")]
    pub transmission_status: Option<String>,
    /// The time the status for the process group was last refreshed.
    #[serde(rename = "statsLastRefreshed", skip_serializing_if = "Option::is_none")]
    pub stats_last_refreshed: Option<String>,
    /// Indicates whether the component is valid, invalid, or still in the process of validating (i.e., it is unknown whether or not the component is valid)
    #[serde(rename = "validationStatus", skip_serializing_if = "Option::is_none")]
    pub validation_status: Option<ValidationStatus>,
    #[serde(rename = "aggregateSnapshot", skip_serializing_if = "Option::is_none")]
    pub aggregate_snapshot: Option<Box<crate::models::RemoteProcessGroupStatusSnapshotDto>>,
    /// A status snapshot for each node in the cluster. If the NiFi instance is a standalone instance, rather than a cluster, this may be null.
    #[serde(rename = "nodeSnapshots", skip_serializing_if = "Option::is_none")]
    pub node_snapshots: Option<Vec<crate::models::NodeRemoteProcessGroupStatusSnapshotDto>>,
}

impl RemoteProcessGroupStatusDto {
    pub fn new() -> RemoteProcessGroupStatusDto {
        RemoteProcessGroupStatusDto {
            group_id: None,
            id: None,
            name: None,
            target_uri: None,
            transmission_status: None,
            stats_last_refreshed: None,
            validation_status: None,
            aggregate_snapshot: None,
            node_snapshots: None,
        }
    }
}

/// Indicates whether the component is valid, invalid, or still in the process of validating (i.e., it is unknown whether or not the component is valid)
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ValidationStatus {
    #[serde(rename = "VALID")]
    VALID,
    #[serde(rename = "INVALID")]
    INVALID,
    #[serde(rename = "VALIDATING")]
    VALIDATING,
}

impl Default for ValidationStatus {
    fn default() -> ValidationStatus {
        Self::VALID
    }
}

