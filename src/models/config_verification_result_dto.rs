/*
 * NiFi Rest API
 *
 * The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: dev@nifi.apache.org
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ConfigVerificationResultDto {
    /// The outcome of the verification
    #[serde(rename = "outcome", skip_serializing_if = "Option::is_none")]
    pub outcome: Option<Outcome>,
    /// The name of the verification step
    #[serde(rename = "verificationStepName", skip_serializing_if = "Option::is_none")]
    pub verification_step_name: Option<String>,
    /// An explanation of why the step was or was not successful
    #[serde(rename = "explanation", skip_serializing_if = "Option::is_none")]
    pub explanation: Option<String>,
}

impl ConfigVerificationResultDto {
    pub fn new() -> ConfigVerificationResultDto {
        ConfigVerificationResultDto {
            outcome: None,
            verification_step_name: None,
            explanation: None,
        }
    }
}

/// The outcome of the verification
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Outcome {
    #[serde(rename = "SUCCESSFUL")]
    SUCCESSFUL,
    #[serde(rename = "FAILED")]
    FAILED,
    #[serde(rename = "SKIPPED")]
    SKIPPED,
}

impl Default for Outcome {
    fn default() -> Outcome {
        Self::SUCCESSFUL
    }
}

