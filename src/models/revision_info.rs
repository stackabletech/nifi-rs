/*
 * NiFi Rest API
 *
 * The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: dev@nifi.apache.org
 * Generated by: https://openapi-generator.tech
 */

/// RevisionInfo : The revision information for an entity managed through the REST API.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct RevisionInfo {
    /// A client identifier used to make a request. By including a client identifier, the API can allow multiple requests without needing the current revision. Due to the asynchronous nature of requests/responses this was implemented to allow the client to make numerous requests without having to wait for the previous response to come back.
    #[serde(rename = "clientId", skip_serializing_if = "Option::is_none")]
    pub client_id: Option<String>,
    /// NiFi Registry employs an optimistic locking strategy where the client must include a revision in their request when performing an update. In a response to a mutable flow request, this field represents the updated base version.
    #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
    pub version: Option<i64>,
    /// The user that last modified the entity.
    #[serde(rename = "lastModifier", skip_serializing_if = "Option::is_none")]
    pub last_modifier: Option<String>,
}

impl RevisionInfo {
    /// The revision information for an entity managed through the REST API.
    pub fn new() -> RevisionInfo {
        RevisionInfo {
            client_id: None,
            version: None,
            last_modifier: None,
        }
    }
}


