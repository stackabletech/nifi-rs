/*
 * NiFi Rest API
 *
 * The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: dev@nifi.apache.org
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct VerifyConfigRequestDto {
    /// The ID of the request
    #[serde(rename = "requestId", skip_serializing_if = "Option::is_none")]
    pub request_id: Option<String>,
    /// The URI for the request
    #[serde(rename = "uri", skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
    /// The timestamp of when the request was submitted
    #[serde(rename = "submissionTime", skip_serializing_if = "Option::is_none")]
    pub submission_time: Option<String>,
    /// The timestamp of when the request was last updated
    #[serde(rename = "lastUpdated", skip_serializing_if = "Option::is_none")]
    pub last_updated: Option<String>,
    /// Whether or not the request is completed
    #[serde(rename = "complete", skip_serializing_if = "Option::is_none")]
    pub complete: Option<bool>,
    /// The reason for the request failing, or null if the request has not failed
    #[serde(rename = "failureReason", skip_serializing_if = "Option::is_none")]
    pub failure_reason: Option<String>,
    /// A value between 0 and 100 (inclusive) indicating how close the request is to completion
    #[serde(rename = "percentCompleted", skip_serializing_if = "Option::is_none")]
    pub percent_completed: Option<i32>,
    /// A description of the current state of the request
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
    /// The steps that are required in order to complete the request, along with the status of each
    #[serde(rename = "updateSteps", skip_serializing_if = "Option::is_none")]
    pub update_steps: Option<Vec<crate::models::VerifyConfigUpdateStepDto>>,
    /// The ID of the component whose configuration was verified
    #[serde(rename = "componentId", skip_serializing_if = "Option::is_none")]
    pub component_id: Option<String>,
    /// The configured component properties
    #[serde(rename = "properties", skip_serializing_if = "Option::is_none")]
    pub properties: Option<::std::collections::HashMap<String, String>>,
    /// FlowFile Attributes that should be used to evaluate Expression Language for resolving property values
    #[serde(rename = "attributes", skip_serializing_if = "Option::is_none")]
    pub attributes: Option<::std::collections::HashMap<String, String>>,
    /// The Results of the verification
    #[serde(rename = "results", skip_serializing_if = "Option::is_none")]
    pub results: Option<Vec<crate::models::ConfigVerificationResultDto>>,
}

impl VerifyConfigRequestDto {
    pub fn new() -> VerifyConfigRequestDto {
        VerifyConfigRequestDto {
            request_id: None,
            uri: None,
            submission_time: None,
            last_updated: None,
            complete: None,
            failure_reason: None,
            percent_completed: None,
            state: None,
            update_steps: None,
            component_id: None,
            properties: None,
            attributes: None,
            results: None,
        }
    }
}


