/*
 * NiFi Rest API
 *
 * The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: dev@nifi.apache.org
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct VersionedFlowSnapshot {
    #[serde(rename = "snapshotMetadata")]
    pub snapshot_metadata: Box<crate::models::VersionedFlowSnapshotMetadata>,
    #[serde(rename = "flowContents")]
    pub flow_contents: Box<crate::models::VersionedProcessGroup>,
    /// The information about controller services that exist outside this versioned flow, but are referenced by components within the versioned flow.
    #[serde(rename = "externalControllerServices", skip_serializing_if = "Option::is_none")]
    pub external_controller_services: Option<::std::collections::HashMap<String, crate::models::ExternalControllerServiceReference>>,
    /// The parameter contexts referenced by process groups in the flow contents. The mapping is from the name of the context to the context instance, and it is expected that any context in this map is referenced by at least one process group in this flow.
    #[serde(rename = "parameterContexts", skip_serializing_if = "Option::is_none")]
    pub parameter_contexts: Option<::std::collections::HashMap<String, crate::models::VersionedParameterContext>>,
    /// The optional encoding version of the flow contents.
    #[serde(rename = "flowEncodingVersion", skip_serializing_if = "Option::is_none")]
    pub flow_encoding_version: Option<String>,
    #[serde(rename = "flow", skip_serializing_if = "Option::is_none")]
    pub flow: Option<Box<crate::models::VersionedFlow>>,
    #[serde(rename = "bucket", skip_serializing_if = "Option::is_none")]
    pub bucket: Option<Box<crate::models::Bucket>>,
    #[serde(rename = "latest", skip_serializing_if = "Option::is_none")]
    pub latest: Option<bool>,
}

impl VersionedFlowSnapshot {
    pub fn new(snapshot_metadata: crate::models::VersionedFlowSnapshotMetadata, flow_contents: crate::models::VersionedProcessGroup) -> VersionedFlowSnapshot {
        VersionedFlowSnapshot {
            snapshot_metadata: Box::new(snapshot_metadata),
            flow_contents: Box::new(flow_contents),
            external_controller_services: None,
            parameter_contexts: None,
            flow_encoding_version: None,
            flow: None,
            bucket: None,
            latest: None,
        }
    }
}


