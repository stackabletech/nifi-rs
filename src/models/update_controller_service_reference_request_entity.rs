/*
 * NiFi Rest API
 *
 * The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: dev@nifi.apache.org
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct UpdateControllerServiceReferenceRequestEntity {
    /// The identifier of the Controller Service.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The new state of the references for the controller service.
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<State>,
    /// The revisions for all referencing components.
    #[serde(rename = "referencingComponentRevisions", skip_serializing_if = "Option::is_none")]
    pub referencing_component_revisions: Option<::std::collections::HashMap<String, crate::models::RevisionDto>>,
    /// Acknowledges that this node is disconnected to allow for mutable requests to proceed.
    #[serde(rename = "disconnectedNodeAcknowledged", skip_serializing_if = "Option::is_none")]
    pub disconnected_node_acknowledged: Option<bool>,
    /// Indicates whether or not the response should only include fields necessary for rendering the NiFi User Interface. As such, when this value is set to true, some fields may be returned as null values, and the selected fields may change at any time without notice. As a result, this value should not be set to true by any client other than the UI.
    #[serde(rename = "uiOnly", skip_serializing_if = "Option::is_none")]
    pub ui_only: Option<bool>,
}

impl UpdateControllerServiceReferenceRequestEntity {
    pub fn new() -> UpdateControllerServiceReferenceRequestEntity {
        UpdateControllerServiceReferenceRequestEntity {
            id: None,
            state: None,
            referencing_component_revisions: None,
            disconnected_node_acknowledged: None,
            ui_only: None,
        }
    }
}

/// The new state of the references for the controller service.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum State {
    #[serde(rename = "ENABLED")]
    ENABLED,
    #[serde(rename = "DISABLED")]
    DISABLED,
    #[serde(rename = "RUNNING")]
    RUNNING,
    #[serde(rename = "STOPPED")]
    STOPPED,
}

impl Default for State {
    fn default() -> State {
        Self::ENABLED
    }
}

