/*
 * NiFi Rest API
 *
 * The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: dev@nifi.apache.org
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct CurrentUserEntity {
    /// The user identity being serialized.
    #[serde(rename = "identity", skip_serializing_if = "Option::is_none")]
    pub identity: Option<String>,
    /// Whether the current user is anonymous.
    #[serde(rename = "anonymous", skip_serializing_if = "Option::is_none")]
    pub anonymous: Option<bool>,
    #[serde(rename = "provenancePermissions", skip_serializing_if = "Option::is_none")]
    pub provenance_permissions: Option<Box<crate::models::PermissionsDto>>,
    #[serde(rename = "countersPermissions", skip_serializing_if = "Option::is_none")]
    pub counters_permissions: Option<Box<crate::models::PermissionsDto>>,
    #[serde(rename = "tenantsPermissions", skip_serializing_if = "Option::is_none")]
    pub tenants_permissions: Option<Box<crate::models::PermissionsDto>>,
    #[serde(rename = "controllerPermissions", skip_serializing_if = "Option::is_none")]
    pub controller_permissions: Option<Box<crate::models::PermissionsDto>>,
    #[serde(rename = "policiesPermissions", skip_serializing_if = "Option::is_none")]
    pub policies_permissions: Option<Box<crate::models::PermissionsDto>>,
    #[serde(rename = "systemPermissions", skip_serializing_if = "Option::is_none")]
    pub system_permissions: Option<Box<crate::models::PermissionsDto>>,
    #[serde(rename = "parameterContextPermissions", skip_serializing_if = "Option::is_none")]
    pub parameter_context_permissions: Option<Box<crate::models::PermissionsDto>>,
    #[serde(rename = "restrictedComponentsPermissions", skip_serializing_if = "Option::is_none")]
    pub restricted_components_permissions: Option<Box<crate::models::PermissionsDto>>,
    /// Permissions for specific component restrictions.
    #[serde(rename = "componentRestrictionPermissions", skip_serializing_if = "Option::is_none")]
    pub component_restriction_permissions: Option<Vec<crate::models::ComponentRestrictionPermissionDto>>,
    /// Whether the current user can version flows.
    #[serde(rename = "canVersionFlows", skip_serializing_if = "Option::is_none")]
    pub can_version_flows: Option<bool>,
}

impl CurrentUserEntity {
    pub fn new() -> CurrentUserEntity {
        CurrentUserEntity {
            identity: None,
            anonymous: None,
            provenance_permissions: None,
            counters_permissions: None,
            tenants_permissions: None,
            controller_permissions: None,
            policies_permissions: None,
            system_permissions: None,
            parameter_context_permissions: None,
            restricted_components_permissions: None,
            component_restriction_permissions: None,
            can_version_flows: None,
        }
    }
}


