/*
 * NiFi Rest API
 *
 * The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: dev@nifi.apache.org
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ProvenanceNodeDto {
    /// The id of the node.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The uuid of the flowfile associated with the provenance event.
    #[serde(rename = "flowFileUuid", skip_serializing_if = "Option::is_none")]
    pub flow_file_uuid: Option<String>,
    /// The uuid of the parent flowfiles of the provenance event.
    #[serde(rename = "parentUuids", skip_serializing_if = "Option::is_none")]
    pub parent_uuids: Option<Vec<String>>,
    /// The uuid of the childrent flowfiles of the provenance event.
    #[serde(rename = "childUuids", skip_serializing_if = "Option::is_none")]
    pub child_uuids: Option<Vec<String>>,
    /// The identifier of the node that this event/flowfile originated from.
    #[serde(rename = "clusterNodeIdentifier", skip_serializing_if = "Option::is_none")]
    pub cluster_node_identifier: Option<String>,
    /// The type of the node.
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub _type: Option<Type>,
    /// If the type is EVENT, this is the type of event.
    #[serde(rename = "eventType", skip_serializing_if = "Option::is_none")]
    pub event_type: Option<String>,
    /// The timestamp of the node in milliseconds.
    #[serde(rename = "millis", skip_serializing_if = "Option::is_none")]
    pub millis: Option<i64>,
    /// The timestamp of the node formatted.
    #[serde(rename = "timestamp", skip_serializing_if = "Option::is_none")]
    pub timestamp: Option<String>,
}

impl ProvenanceNodeDto {
    pub fn new() -> ProvenanceNodeDto {
        ProvenanceNodeDto {
            id: None,
            flow_file_uuid: None,
            parent_uuids: None,
            child_uuids: None,
            cluster_node_identifier: None,
            _type: None,
            event_type: None,
            millis: None,
            timestamp: None,
        }
    }
}

/// The type of the node.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "FLOWFILE")]
    FLOWFILE,
    #[serde(rename = "EVENT")]
    EVENT,
}

impl Default for Type {
    fn default() -> Type {
        Self::FLOWFILE
    }
}

