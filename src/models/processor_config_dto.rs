/*
 * NiFi Rest API
 *
 * The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: dev@nifi.apache.org
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ProcessorConfigDto {
    /// The properties for the processor. Properties whose value is not set will only contain the property name.
    #[serde(rename = "properties", skip_serializing_if = "Option::is_none")]
    pub properties: Option<::std::collections::HashMap<String, String>>,
    /// Descriptors for the processor's properties.
    #[serde(rename = "descriptors", skip_serializing_if = "Option::is_none")]
    pub descriptors: Option<::std::collections::HashMap<String, crate::models::PropertyDescriptorDto>>,
    /// The frequency with which to schedule the processor. The format of the value will depend on th value of schedulingStrategy.
    #[serde(rename = "schedulingPeriod", skip_serializing_if = "Option::is_none")]
    pub scheduling_period: Option<String>,
    /// Indcates whether the prcessor should be scheduled to run in event or timer driven mode.
    #[serde(rename = "schedulingStrategy", skip_serializing_if = "Option::is_none")]
    pub scheduling_strategy: Option<String>,
    /// Indicates the node where the process will execute.
    #[serde(rename = "executionNode", skip_serializing_if = "Option::is_none")]
    pub execution_node: Option<String>,
    /// The amount of time that is used when the process penalizes a flowfile.
    #[serde(rename = "penaltyDuration", skip_serializing_if = "Option::is_none")]
    pub penalty_duration: Option<String>,
    /// The amount of time that must elapse before this processor is scheduled again after yielding.
    #[serde(rename = "yieldDuration", skip_serializing_if = "Option::is_none")]
    pub yield_duration: Option<String>,
    /// The level at which the processor will report bulletins.
    #[serde(rename = "bulletinLevel", skip_serializing_if = "Option::is_none")]
    pub bulletin_level: Option<String>,
    /// The run duration for the processor in milliseconds.
    #[serde(rename = "runDurationMillis", skip_serializing_if = "Option::is_none")]
    pub run_duration_millis: Option<i64>,
    /// The number of tasks that should be concurrently schedule for the processor. If the processor doesn't allow parallol processing then any positive input will be ignored.
    #[serde(rename = "concurrentlySchedulableTaskCount", skip_serializing_if = "Option::is_none")]
    pub concurrently_schedulable_task_count: Option<i32>,
    /// The names of all relationships that cause a flow file to be terminated if the relationship is not connected elsewhere. This property differs from the 'isAutoTerminate' property of the RelationshipDTO in that the RelationshipDTO is meant to depict the current configuration, whereas this property can be set in a DTO when updating a Processor in order to change which Relationships should be auto-terminated.
    #[serde(rename = "autoTerminatedRelationships", skip_serializing_if = "Option::is_none")]
    pub auto_terminated_relationships: Option<Vec<String>>,
    /// The comments for the processor.
    #[serde(rename = "comments", skip_serializing_if = "Option::is_none")]
    pub comments: Option<String>,
    /// The URL for the processor's custom configuration UI if applicable.
    #[serde(rename = "customUiUrl", skip_serializing_if = "Option::is_none")]
    pub custom_ui_url: Option<String>,
    /// Whether the processor is loss tolerant.
    #[serde(rename = "lossTolerant", skip_serializing_if = "Option::is_none")]
    pub loss_tolerant: Option<bool>,
    /// The annotation data for the processor used to relay configuration between a custom UI and the procesosr.
    #[serde(rename = "annotationData", skip_serializing_if = "Option::is_none")]
    pub annotation_data: Option<String>,
    /// Maps default values for concurrent tasks for each applicable scheduling strategy.
    #[serde(rename = "defaultConcurrentTasks", skip_serializing_if = "Option::is_none")]
    pub default_concurrent_tasks: Option<::std::collections::HashMap<String, String>>,
    /// Maps default values for scheduling period for each applicable scheduling strategy.
    #[serde(rename = "defaultSchedulingPeriod", skip_serializing_if = "Option::is_none")]
    pub default_scheduling_period: Option<::std::collections::HashMap<String, String>>,
    /// Overall number of retries.
    #[serde(rename = "retryCount", skip_serializing_if = "Option::is_none")]
    pub retry_count: Option<i32>,
    /// All the relationships should be retried.
    #[serde(rename = "retriedRelationships", skip_serializing_if = "Option::is_none")]
    pub retried_relationships: Option<Vec<String>>,
    /// Determines whether the FlowFile should be penalized or the processor should be yielded between retries.
    #[serde(rename = "backoffMechanism", skip_serializing_if = "Option::is_none")]
    pub backoff_mechanism: Option<BackoffMechanism>,
    /// Maximum amount of time to be waited during a retry period.
    #[serde(rename = "maxBackoffPeriod", skip_serializing_if = "Option::is_none")]
    pub max_backoff_period: Option<String>,
}

impl ProcessorConfigDto {
    pub fn new() -> ProcessorConfigDto {
        ProcessorConfigDto {
            properties: None,
            descriptors: None,
            scheduling_period: None,
            scheduling_strategy: None,
            execution_node: None,
            penalty_duration: None,
            yield_duration: None,
            bulletin_level: None,
            run_duration_millis: None,
            concurrently_schedulable_task_count: None,
            auto_terminated_relationships: None,
            comments: None,
            custom_ui_url: None,
            loss_tolerant: None,
            annotation_data: None,
            default_concurrent_tasks: None,
            default_scheduling_period: None,
            retry_count: None,
            retried_relationships: None,
            backoff_mechanism: None,
            max_backoff_period: None,
        }
    }
}

/// Determines whether the FlowFile should be penalized or the processor should be yielded between retries.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum BackoffMechanism {
    #[serde(rename = "PENALIZE_FLOWFILE")]
    PENALIZEFLOWFILE,
    #[serde(rename = "YIELD_PROCESSOR")]
    YIELDPROCESSOR,
}

impl Default for BackoffMechanism {
    fn default() -> BackoffMechanism {
        Self::PENALIZEFLOWFILE
    }
}

