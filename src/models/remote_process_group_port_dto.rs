/*
 * NiFi Rest API
 *
 * The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: dev@nifi.apache.org
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct RemoteProcessGroupPortDto {
    /// The id of the port.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The id of the target port.
    #[serde(rename = "targetId", skip_serializing_if = "Option::is_none")]
    pub target_id: Option<String>,
    /// The ID of the corresponding component that is under version control
    #[serde(rename = "versionedComponentId", skip_serializing_if = "Option::is_none")]
    pub versioned_component_id: Option<String>,
    /// The id of the remote process group that the port resides in.
    #[serde(rename = "groupId", skip_serializing_if = "Option::is_none")]
    pub group_id: Option<String>,
    /// The name of the target port.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The comments as configured on the target port.
    #[serde(rename = "comments", skip_serializing_if = "Option::is_none")]
    pub comments: Option<String>,
    /// The number of task that may transmit flowfiles to the target port concurrently.
    #[serde(rename = "concurrentlySchedulableTaskCount", skip_serializing_if = "Option::is_none")]
    pub concurrently_schedulable_task_count: Option<i32>,
    /// Whether the remote port is configured for transmission.
    #[serde(rename = "transmitting", skip_serializing_if = "Option::is_none")]
    pub transmitting: Option<bool>,
    /// Whether the flowfiles are compressed when sent to the target port.
    #[serde(rename = "useCompression", skip_serializing_if = "Option::is_none")]
    pub use_compression: Option<bool>,
    /// Whether the target port exists.
    #[serde(rename = "exists", skip_serializing_if = "Option::is_none")]
    pub exists: Option<bool>,
    /// Whether the target port is running.
    #[serde(rename = "targetRunning", skip_serializing_if = "Option::is_none")]
    pub target_running: Option<bool>,
    /// Whether the port has either an incoming or outgoing connection.
    #[serde(rename = "connected", skip_serializing_if = "Option::is_none")]
    pub connected: Option<bool>,
    #[serde(rename = "batchSettings", skip_serializing_if = "Option::is_none")]
    pub batch_settings: Option<Box<crate::models::BatchSettingsDto>>,
}

impl RemoteProcessGroupPortDto {
    pub fn new() -> RemoteProcessGroupPortDto {
        RemoteProcessGroupPortDto {
            id: None,
            target_id: None,
            versioned_component_id: None,
            group_id: None,
            name: None,
            comments: None,
            concurrently_schedulable_task_count: None,
            transmitting: None,
            use_compression: None,
            exists: None,
            target_running: None,
            connected: None,
            batch_settings: None,
        }
    }
}


