/*
 * NiFi Rest API
 *
 * The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: dev@nifi.apache.org
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct AccessPolicyDto {
    /// The id of the component.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The ID of the corresponding component that is under version control
    #[serde(rename = "versionedComponentId", skip_serializing_if = "Option::is_none")]
    pub versioned_component_id: Option<String>,
    /// The id of parent process group of this component if applicable.
    #[serde(rename = "parentGroupId", skip_serializing_if = "Option::is_none")]
    pub parent_group_id: Option<String>,
    #[serde(rename = "position", skip_serializing_if = "Option::is_none")]
    pub position: Option<Box<crate::models::PositionDto>>,
    /// The resource for this access policy.
    #[serde(rename = "resource", skip_serializing_if = "Option::is_none")]
    pub resource: Option<String>,
    /// The action associated with this access policy.
    #[serde(rename = "action", skip_serializing_if = "Option::is_none")]
    pub action: Option<Action>,
    #[serde(rename = "componentReference", skip_serializing_if = "Option::is_none")]
    pub component_reference: Option<Box<crate::models::ComponentReferenceEntity>>,
    /// Whether this policy is configurable.
    #[serde(rename = "configurable", skip_serializing_if = "Option::is_none")]
    pub configurable: Option<bool>,
    /// The set of user IDs associated with this access policy.
    #[serde(rename = "users", skip_serializing_if = "Option::is_none")]
    pub users: Option<Vec<crate::models::TenantEntity>>,
    /// The set of user group IDs associated with this access policy.
    #[serde(rename = "userGroups", skip_serializing_if = "Option::is_none")]
    pub user_groups: Option<Vec<crate::models::TenantEntity>>,
}

impl AccessPolicyDto {
    pub fn new() -> AccessPolicyDto {
        AccessPolicyDto {
            id: None,
            versioned_component_id: None,
            parent_group_id: None,
            position: None,
            resource: None,
            action: None,
            component_reference: None,
            configurable: None,
            users: None,
            user_groups: None,
        }
    }
}

/// The action associated with this access policy.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Action {
    #[serde(rename = "read")]
    Read,
    #[serde(rename = "write")]
    Write,
}

impl Default for Action {
    fn default() -> Action {
        Self::Read
    }
}

