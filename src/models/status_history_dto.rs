/*
 * NiFi Rest API
 *
 * The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: dev@nifi.apache.org
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct StatusHistoryDto {
    /// When the status history was generated.
    #[serde(rename = "generated", skip_serializing_if = "Option::is_none")]
    pub generated: Option<String>,
    /// A Map of key/value pairs that describe the component that the status history belongs to
    #[serde(rename = "componentDetails", skip_serializing_if = "Option::is_none")]
    pub component_details: Option<::std::collections::HashMap<String, String>>,
    /// The Descriptors that provide information on each of the metrics provided in the status history
    #[serde(rename = "fieldDescriptors", skip_serializing_if = "Option::is_none")]
    pub field_descriptors: Option<Vec<crate::models::StatusDescriptorDto>>,
    /// A list of StatusSnapshotDTO objects that provide the actual metric values for the component. If the NiFi instance is clustered, this will represent the aggregate status across all nodes. If the NiFi instance is not clustered, this will represent the status of the entire NiFi instance.
    #[serde(rename = "aggregateSnapshots", skip_serializing_if = "Option::is_none")]
    pub aggregate_snapshots: Option<Vec<crate::models::StatusSnapshotDto>>,
    /// The NodeStatusSnapshotsDTO objects that provide the actual metric values for the component, for each node. If the NiFi instance is not clustered, this value will be null.
    #[serde(rename = "nodeSnapshots", skip_serializing_if = "Option::is_none")]
    pub node_snapshots: Option<Vec<crate::models::NodeStatusSnapshotsDto>>,
}

impl StatusHistoryDto {
    pub fn new() -> StatusHistoryDto {
        StatusHistoryDto {
            generated: None,
            component_details: None,
            field_descriptors: None,
            aggregate_snapshots: None,
            node_snapshots: None,
        }
    }
}


