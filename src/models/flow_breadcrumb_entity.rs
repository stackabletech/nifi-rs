/*
 * NiFi Rest API
 *
 * The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: dev@nifi.apache.org
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct FlowBreadcrumbEntity {
    /// The id of this ancestor ProcessGroup.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "permissions", skip_serializing_if = "Option::is_none")]
    pub permissions: Option<Box<crate::models::PermissionsDto>>,
    /// The current state of the Process Group, as it relates to the Versioned Flow
    #[serde(rename = "versionedFlowState", skip_serializing_if = "Option::is_none")]
    pub versioned_flow_state: Option<VersionedFlowState>,
    #[serde(rename = "breadcrumb", skip_serializing_if = "Option::is_none")]
    pub breadcrumb: Option<Box<crate::models::FlowBreadcrumbDto>>,
    #[serde(rename = "parentBreadcrumb", skip_serializing_if = "Option::is_none")]
    pub parent_breadcrumb: Option<Box<crate::models::FlowBreadcrumbEntity>>,
}

impl FlowBreadcrumbEntity {
    pub fn new() -> FlowBreadcrumbEntity {
        FlowBreadcrumbEntity {
            id: None,
            permissions: None,
            versioned_flow_state: None,
            breadcrumb: None,
            parent_breadcrumb: None,
        }
    }
}

/// The current state of the Process Group, as it relates to the Versioned Flow
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum VersionedFlowState {
    #[serde(rename = "LOCALLY_MODIFIED")]
    LOCALLYMODIFIED,
    #[serde(rename = "STALE")]
    STALE,
    #[serde(rename = "LOCALLY_MODIFIED_AND_STALE")]
    LOCALLYMODIFIEDANDSTALE,
    #[serde(rename = "UP_TO_DATE")]
    UPTODATE,
    #[serde(rename = "SYNC_FAILURE")]
    SYNCFAILURE,
}

impl Default for VersionedFlowState {
    fn default() -> VersionedFlowState {
        Self::LOCALLYMODIFIED
    }
}

