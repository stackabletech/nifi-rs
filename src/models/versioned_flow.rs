/*
 * NiFi Rest API
 *
 * The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: dev@nifi.apache.org
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct VersionedFlow {
    #[serde(rename = "link", skip_serializing_if = "Option::is_none")]
    pub link: Option<Box<crate::models::JaxbLink>>,
    /// An ID to uniquely identify this object.
    #[serde(rename = "identifier", skip_serializing_if = "Option::is_none")]
    pub identifier: Option<String>,
    /// The name of the item.
    #[serde(rename = "name")]
    pub name: String,
    /// A description of the item.
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The identifier of the bucket this items belongs to. This cannot be changed after the item is created.
    #[serde(rename = "bucketIdentifier")]
    pub bucket_identifier: String,
    /// The name of the bucket this items belongs to.
    #[serde(rename = "bucketName", skip_serializing_if = "Option::is_none")]
    pub bucket_name: Option<String>,
    /// The timestamp of when the item was created, as milliseconds since epoch.
    #[serde(rename = "createdTimestamp", skip_serializing_if = "Option::is_none")]
    pub created_timestamp: Option<i64>,
    /// The timestamp of when the item was last modified, as milliseconds since epoch.
    #[serde(rename = "modifiedTimestamp", skip_serializing_if = "Option::is_none")]
    pub modified_timestamp: Option<i64>,
    /// The type of item.
    #[serde(rename = "type")]
    pub _type: Type,
    #[serde(rename = "permissions", skip_serializing_if = "Option::is_none")]
    pub permissions: Option<Box<crate::models::Permissions>>,
    /// The number of versions of this flow.
    #[serde(rename = "versionCount", skip_serializing_if = "Option::is_none")]
    pub version_count: Option<i64>,
    #[serde(rename = "revision", skip_serializing_if = "Option::is_none")]
    pub revision: Option<Box<crate::models::RevisionInfo>>,
}

impl VersionedFlow {
    pub fn new(name: String, bucket_identifier: String, _type: Type) -> VersionedFlow {
        VersionedFlow {
            link: None,
            identifier: None,
            name,
            description: None,
            bucket_identifier,
            bucket_name: None,
            created_timestamp: None,
            modified_timestamp: None,
            _type,
            permissions: None,
            version_count: None,
            revision: None,
        }
    }
}

/// The type of item.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "Flow")]
    Flow,
    #[serde(rename = "Bundle")]
    Bundle,
}

impl Default for Type {
    fn default() -> Type {
        Self::Flow
    }
}

