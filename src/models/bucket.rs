/*
 * NiFi Rest API
 *
 * The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: dev@nifi.apache.org
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Bucket {
    #[serde(rename = "link", skip_serializing_if = "Option::is_none")]
    pub link: Option<Box<crate::models::JaxbLink>>,
    /// An ID to uniquely identify this object.
    #[serde(rename = "identifier", skip_serializing_if = "Option::is_none")]
    pub identifier: Option<String>,
    /// The name of the bucket.
    #[serde(rename = "name")]
    pub name: String,
    /// The timestamp of when the bucket was first created. This is set by the server at creation time.
    #[serde(rename = "createdTimestamp", skip_serializing_if = "Option::is_none")]
    pub created_timestamp: Option<i64>,
    /// A description of the bucket.
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Indicates if this bucket allows the same version of an extension bundle to be redeployed and thus overwrite the existing artifact. By default this is false.
    #[serde(rename = "allowBundleRedeploy", skip_serializing_if = "Option::is_none")]
    pub allow_bundle_redeploy: Option<bool>,
    /// Indicates if this bucket allows read access to unauthenticated anonymous users
    #[serde(rename = "allowPublicRead", skip_serializing_if = "Option::is_none")]
    pub allow_public_read: Option<bool>,
    #[serde(rename = "permissions", skip_serializing_if = "Option::is_none")]
    pub permissions: Option<Box<crate::models::Permissions>>,
    #[serde(rename = "revision", skip_serializing_if = "Option::is_none")]
    pub revision: Option<Box<crate::models::RevisionInfo>>,
}

impl Bucket {
    pub fn new(name: String) -> Bucket {
        Bucket {
            link: None,
            identifier: None,
            name,
            created_timestamp: None,
            description: None,
            allow_bundle_redeploy: None,
            allow_public_read: None,
            permissions: None,
            revision: None,
        }
    }
}


