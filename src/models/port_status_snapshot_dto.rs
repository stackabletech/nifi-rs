/*
 * NiFi Rest API
 *
 * The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: dev@nifi.apache.org
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct PortStatusSnapshotDto {
    /// The id of the port.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The id of the parent process group of the port.
    #[serde(rename = "groupId", skip_serializing_if = "Option::is_none")]
    pub group_id: Option<String>,
    /// The name of the port.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The active thread count for the port.
    #[serde(rename = "activeThreadCount", skip_serializing_if = "Option::is_none")]
    pub active_thread_count: Option<i32>,
    /// The number of FlowFiles that have been accepted in the last 5 minutes.
    #[serde(rename = "flowFilesIn", skip_serializing_if = "Option::is_none")]
    pub flow_files_in: Option<i32>,
    /// The size of hte FlowFiles that have been accepted in the last 5 minutes.
    #[serde(rename = "bytesIn", skip_serializing_if = "Option::is_none")]
    pub bytes_in: Option<i64>,
    /// The count/size of flowfiles that have been accepted in the last 5 minutes.
    #[serde(rename = "input", skip_serializing_if = "Option::is_none")]
    pub input: Option<String>,
    /// The number of FlowFiles that have been processed in the last 5 minutes.
    #[serde(rename = "flowFilesOut", skip_serializing_if = "Option::is_none")]
    pub flow_files_out: Option<i32>,
    /// The number of bytes that have been processed in the last 5 minutes.
    #[serde(rename = "bytesOut", skip_serializing_if = "Option::is_none")]
    pub bytes_out: Option<i64>,
    /// The count/size of flowfiles that have been processed in the last 5 minutes.
    #[serde(rename = "output", skip_serializing_if = "Option::is_none")]
    pub output: Option<String>,
    /// Whether the port has incoming or outgoing connections to a remote NiFi.
    #[serde(rename = "transmitting", skip_serializing_if = "Option::is_none")]
    pub transmitting: Option<bool>,
    /// The run status of the port.
    #[serde(rename = "runStatus", skip_serializing_if = "Option::is_none")]
    pub run_status: Option<RunStatus>,
}

impl PortStatusSnapshotDto {
    pub fn new() -> PortStatusSnapshotDto {
        PortStatusSnapshotDto {
            id: None,
            group_id: None,
            name: None,
            active_thread_count: None,
            flow_files_in: None,
            bytes_in: None,
            input: None,
            flow_files_out: None,
            bytes_out: None,
            output: None,
            transmitting: None,
            run_status: None,
        }
    }
}

/// The run status of the port.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum RunStatus {
    #[serde(rename = "Running")]
    Running,
    #[serde(rename = "Stopped")]
    Stopped,
    #[serde(rename = "Validating")]
    Validating,
    #[serde(rename = "Disabled")]
    Disabled,
    #[serde(rename = "Invalid")]
    Invalid,
}

impl Default for RunStatus {
    fn default() -> RunStatus {
        Self::Running
    }
}

