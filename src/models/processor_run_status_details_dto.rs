/*
 * NiFi Rest API
 *
 * The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: dev@nifi.apache.org
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ProcessorRunStatusDetailsDto {
    /// The ID of the processor
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The name of the processor
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The run status of the processor
    #[serde(rename = "runStatus", skip_serializing_if = "Option::is_none")]
    pub run_status: Option<RunStatus>,
    /// The processor's validation errors
    #[serde(rename = "validationErrors", skip_serializing_if = "Option::is_none")]
    pub validation_errors: Option<Vec<String>>,
    /// The current number of threads that the processor is currently using
    #[serde(rename = "activeThreadCount", skip_serializing_if = "Option::is_none")]
    pub active_thread_count: Option<i32>,
}

impl ProcessorRunStatusDetailsDto {
    pub fn new() -> ProcessorRunStatusDetailsDto {
        ProcessorRunStatusDetailsDto {
            id: None,
            name: None,
            run_status: None,
            validation_errors: None,
            active_thread_count: None,
        }
    }
}

/// The run status of the processor
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum RunStatus {
    #[serde(rename = "Running")]
    Running,
    #[serde(rename = "Stopped")]
    Stopped,
    #[serde(rename = "Invalid")]
    Invalid,
    #[serde(rename = "Validating")]
    Validating,
    #[serde(rename = "Disabled")]
    Disabled,
}

impl Default for RunStatus {
    fn default() -> RunStatus {
        Self::Running
    }
}

