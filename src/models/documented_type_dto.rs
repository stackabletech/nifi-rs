/*
 * NiFi Rest API
 *
 * The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: dev@nifi.apache.org
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct DocumentedTypeDto {
    /// The fully qualified name of the type.
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub _type: Option<String>,
    #[serde(rename = "bundle", skip_serializing_if = "Option::is_none")]
    pub bundle: Option<Box<crate::models::BundleDto>>,
    /// If this type represents a ControllerService, this lists the APIs it implements.
    #[serde(rename = "controllerServiceApis", skip_serializing_if = "Option::is_none")]
    pub controller_service_apis: Option<Vec<crate::models::ControllerServiceApiDto>>,
    /// The description of the type.
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Whether this type is restricted.
    #[serde(rename = "restricted", skip_serializing_if = "Option::is_none")]
    pub restricted: Option<bool>,
    /// The optional description of why the usage of this component is restricted.
    #[serde(rename = "usageRestriction", skip_serializing_if = "Option::is_none")]
    pub usage_restriction: Option<String>,
    /// An optional collection of explicit restrictions. If specified, these explicit restrictions will be enfored.
    #[serde(rename = "explicitRestrictions", skip_serializing_if = "Option::is_none")]
    pub explicit_restrictions: Option<Vec<crate::models::ExplicitRestrictionDto>>,
    /// The description of why the usage of this component is restricted.
    #[serde(rename = "deprecationReason", skip_serializing_if = "Option::is_none")]
    pub deprecation_reason: Option<String>,
    /// The tags associated with this type.
    #[serde(rename = "tags", skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<String>>,
}

impl DocumentedTypeDto {
    pub fn new() -> DocumentedTypeDto {
        DocumentedTypeDto {
            _type: None,
            bundle: None,
            controller_service_apis: None,
            description: None,
            restricted: None,
            usage_restriction: None,
            explicit_restrictions: None,
            deprecation_reason: None,
            tags: None,
        }
    }
}


