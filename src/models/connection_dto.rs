/*
 * NiFi Rest API
 *
 * The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: dev@nifi.apache.org
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ConnectionDto {
    /// The id of the component.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The ID of the corresponding component that is under version control
    #[serde(rename = "versionedComponentId", skip_serializing_if = "Option::is_none")]
    pub versioned_component_id: Option<String>,
    /// The id of parent process group of this component if applicable.
    #[serde(rename = "parentGroupId", skip_serializing_if = "Option::is_none")]
    pub parent_group_id: Option<String>,
    #[serde(rename = "position", skip_serializing_if = "Option::is_none")]
    pub position: Option<Box<crate::models::PositionDto>>,
    #[serde(rename = "source", skip_serializing_if = "Option::is_none")]
    pub source: Option<Box<crate::models::ConnectableDto>>,
    #[serde(rename = "destination", skip_serializing_if = "Option::is_none")]
    pub destination: Option<Box<crate::models::ConnectableDto>>,
    /// The name of the connection.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The index of the bend point where to place the connection label.
    #[serde(rename = "labelIndex", skip_serializing_if = "Option::is_none")]
    pub label_index: Option<i32>,
    /// The z index of the connection.
    #[serde(rename = "getzIndex", skip_serializing_if = "Option::is_none")]
    pub getz_index: Option<i64>,
    /// The selected relationship that comprise the connection.
    #[serde(rename = "selectedRelationships", skip_serializing_if = "Option::is_none")]
    pub selected_relationships: Option<Vec<String>>,
    /// The relationships that the source of the connection currently supports.
    #[serde(rename = "availableRelationships", skip_serializing_if = "Option::is_none")]
    pub available_relationships: Option<Vec<String>>,
    /// The object count threshold for determining when back pressure is applied. Updating this value is a passive change in the sense that it won't impact whether existing files over the limit are affected but it does help feeder processors to stop pushing too much into this work queue.
    #[serde(rename = "backPressureObjectThreshold", skip_serializing_if = "Option::is_none")]
    pub back_pressure_object_threshold: Option<i64>,
    /// The object data size threshold for determining when back pressure is applied. Updating this value is a passive change in the sense that it won't impact whether existing files over the limit are affected but it does help feeder processors to stop pushing too much into this work queue.
    #[serde(rename = "backPressureDataSizeThreshold", skip_serializing_if = "Option::is_none")]
    pub back_pressure_data_size_threshold: Option<String>,
    /// The amount of time a flow file may be in the flow before it will be automatically aged out of the flow. Once a flow file reaches this age it will be terminated from the flow the next time a processor attempts to start work on it.
    #[serde(rename = "flowFileExpiration", skip_serializing_if = "Option::is_none")]
    pub flow_file_expiration: Option<String>,
    /// The comparators used to prioritize the queue.
    #[serde(rename = "prioritizers", skip_serializing_if = "Option::is_none")]
    pub prioritizers: Option<Vec<String>>,
    /// The bend points on the connection.
    #[serde(rename = "bends", skip_serializing_if = "Option::is_none")]
    pub bends: Option<Vec<crate::models::PositionDto>>,
    /// How to load balance the data in this Connection across the nodes in the cluster.
    #[serde(rename = "loadBalanceStrategy", skip_serializing_if = "Option::is_none")]
    pub load_balance_strategy: Option<LoadBalanceStrategy>,
    /// The FlowFile Attribute to use for determining which node a FlowFile will go to if the Load Balancing Strategy is set to PARTITION_BY_ATTRIBUTE
    #[serde(rename = "loadBalancePartitionAttribute", skip_serializing_if = "Option::is_none")]
    pub load_balance_partition_attribute: Option<String>,
    /// Whether or not data should be compressed when being transferred between nodes in the cluster.
    #[serde(rename = "loadBalanceCompression", skip_serializing_if = "Option::is_none")]
    pub load_balance_compression: Option<LoadBalanceCompression>,
    /// The current status of the Connection's Load Balancing Activities. Status can indicate that Load Balancing is not configured for the connection, that Load Balancing is configured but inactive (not currently transferring data to another node), or that Load Balancing is configured and actively transferring data to another node.
    #[serde(rename = "loadBalanceStatus", skip_serializing_if = "Option::is_none")]
    pub load_balance_status: Option<LoadBalanceStatus>,
}

impl ConnectionDto {
    pub fn new() -> ConnectionDto {
        ConnectionDto {
            id: None,
            versioned_component_id: None,
            parent_group_id: None,
            position: None,
            source: None,
            destination: None,
            name: None,
            label_index: None,
            getz_index: None,
            selected_relationships: None,
            available_relationships: None,
            back_pressure_object_threshold: None,
            back_pressure_data_size_threshold: None,
            flow_file_expiration: None,
            prioritizers: None,
            bends: None,
            load_balance_strategy: None,
            load_balance_partition_attribute: None,
            load_balance_compression: None,
            load_balance_status: None,
        }
    }
}

/// How to load balance the data in this Connection across the nodes in the cluster.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum LoadBalanceStrategy {
    #[serde(rename = "DO_NOT_LOAD_BALANCE")]
    DONOTLOADBALANCE,
    #[serde(rename = "PARTITION_BY_ATTRIBUTE")]
    PARTITIONBYATTRIBUTE,
    #[serde(rename = "ROUND_ROBIN")]
    ROUNDROBIN,
    #[serde(rename = "SINGLE_NODE")]
    SINGLENODE,
}

impl Default for LoadBalanceStrategy {
    fn default() -> LoadBalanceStrategy {
        Self::DONOTLOADBALANCE
    }
}
/// Whether or not data should be compressed when being transferred between nodes in the cluster.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum LoadBalanceCompression {
    #[serde(rename = "DO_NOT_COMPRESS")]
    DONOTCOMPRESS,
    #[serde(rename = "COMPRESS_ATTRIBUTES_ONLY")]
    COMPRESSATTRIBUTESONLY,
    #[serde(rename = "COMPRESS_ATTRIBUTES_AND_CONTENT")]
    COMPRESSATTRIBUTESANDCONTENT,
}

impl Default for LoadBalanceCompression {
    fn default() -> LoadBalanceCompression {
        Self::DONOTCOMPRESS
    }
}
/// The current status of the Connection's Load Balancing Activities. Status can indicate that Load Balancing is not configured for the connection, that Load Balancing is configured but inactive (not currently transferring data to another node), or that Load Balancing is configured and actively transferring data to another node.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum LoadBalanceStatus {
    #[serde(rename = "LOAD_BALANCE_NOT_CONFIGURED")]
    NOTCONFIGURED,
    #[serde(rename = "LOAD_BALANCE_INACTIVE")]
    INACTIVE,
    #[serde(rename = "LOAD_BALANCE_ACTIVE")]
    ACTIVE,
}

impl Default for LoadBalanceStatus {
    fn default() -> LoadBalanceStatus {
        Self::NOTCONFIGURED
    }
}

