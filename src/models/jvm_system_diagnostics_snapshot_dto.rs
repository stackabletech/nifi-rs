/*
 * NiFi Rest API
 *
 * The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: dev@nifi.apache.org
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct JvmSystemDiagnosticsSnapshotDto {
    #[serde(rename = "flowFileRepositoryStorageUsage", skip_serializing_if = "Option::is_none")]
    pub flow_file_repository_storage_usage: Option<Box<crate::models::RepositoryUsageDto>>,
    /// Information about the Content Repository's usage
    #[serde(rename = "contentRepositoryStorageUsage", skip_serializing_if = "Option::is_none")]
    pub content_repository_storage_usage: Option<Vec<crate::models::RepositoryUsageDto>>,
    /// Information about the Provenance Repository's usage
    #[serde(rename = "provenanceRepositoryStorageUsage", skip_serializing_if = "Option::is_none")]
    pub provenance_repository_storage_usage: Option<Vec<crate::models::RepositoryUsageDto>>,
    /// The maximum number of bytes that the JVM heap is configured to use for heap
    #[serde(rename = "maxHeapBytes", skip_serializing_if = "Option::is_none")]
    pub max_heap_bytes: Option<i64>,
    /// The maximum number of bytes that the JVM heap is configured to use, as a human-readable value
    #[serde(rename = "maxHeap", skip_serializing_if = "Option::is_none")]
    pub max_heap: Option<String>,
    /// Diagnostic information about the JVM's garbage collections
    #[serde(rename = "garbageCollectionDiagnostics", skip_serializing_if = "Option::is_none")]
    pub garbage_collection_diagnostics: Option<Vec<crate::models::GarbageCollectionDiagnosticsDto>>,
    /// The number of CPU Cores available on the system
    #[serde(rename = "cpuCores", skip_serializing_if = "Option::is_none")]
    pub cpu_cores: Option<i32>,
    /// The 1-minute CPU Load Average
    #[serde(rename = "cpuLoadAverage", skip_serializing_if = "Option::is_none")]
    pub cpu_load_average: Option<f64>,
    /// The number of bytes of RAM available on the system
    #[serde(rename = "physicalMemoryBytes", skip_serializing_if = "Option::is_none")]
    pub physical_memory_bytes: Option<i64>,
    /// The number of bytes of RAM available on the system as a human-readable value
    #[serde(rename = "physicalMemory", skip_serializing_if = "Option::is_none")]
    pub physical_memory: Option<String>,
    /// The number of files that are open by the NiFi process
    #[serde(rename = "openFileDescriptors", skip_serializing_if = "Option::is_none")]
    pub open_file_descriptors: Option<i64>,
    /// The maximum number of open file descriptors that are available to each process
    #[serde(rename = "maxOpenFileDescriptors", skip_serializing_if = "Option::is_none")]
    pub max_open_file_descriptors: Option<i64>,
}

impl JvmSystemDiagnosticsSnapshotDto {
    pub fn new() -> JvmSystemDiagnosticsSnapshotDto {
        JvmSystemDiagnosticsSnapshotDto {
            flow_file_repository_storage_usage: None,
            content_repository_storage_usage: None,
            provenance_repository_storage_usage: None,
            max_heap_bytes: None,
            max_heap: None,
            garbage_collection_diagnostics: None,
            cpu_cores: None,
            cpu_load_average: None,
            physical_memory_bytes: None,
            physical_memory: None,
            open_file_descriptors: None,
            max_open_file_descriptors: None,
        }
    }
}


