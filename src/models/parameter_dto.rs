/*
 * NiFi Rest API
 *
 * The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: dev@nifi.apache.org
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ParameterDto {
    /// The name of the Parameter
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The description of the Parameter
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Whether or not the Parameter is sensitive
    #[serde(rename = "sensitive", skip_serializing_if = "Option::is_none")]
    pub sensitive: Option<bool>,
    /// The value of the Parameter
    #[serde(rename = "value", skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    /// Whether or not the value of the Parameter was removed. When a request is made to change a parameter, the value may be null. The absence of the value may be used either to indicate that the value is not to be changed, or that the value is to be set to null (i.e., removed). This denotes which of the two scenarios is being encountered.
    #[serde(rename = "valueRemoved", skip_serializing_if = "Option::is_none")]
    pub value_removed: Option<bool>,
    /// The set of all components in the flow that are referencing this Parameter
    #[serde(rename = "referencingComponents", skip_serializing_if = "Option::is_none")]
    pub referencing_components: Option<Vec<crate::models::AffectedComponentEntity>>,
    #[serde(rename = "parameterContext", skip_serializing_if = "Option::is_none")]
    pub parameter_context: Option<Box<crate::models::ParameterContextReferenceEntity>>,
    /// Whether or not the Parameter is inherited from another context
    #[serde(rename = "inherited", skip_serializing_if = "Option::is_none")]
    pub inherited: Option<bool>,
}

impl ParameterDto {
    pub fn new() -> ParameterDto {
        ParameterDto {
            name: None,
            description: None,
            sensitive: None,
            value: None,
            value_removed: None,
            referencing_components: None,
            parameter_context: None,
            inherited: None,
        }
    }
}


