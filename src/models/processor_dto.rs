/*
 * NiFi Rest API
 *
 * The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: dev@nifi.apache.org
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ProcessorDto {
    /// The id of the component.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The ID of the corresponding component that is under version control
    #[serde(rename = "versionedComponentId", skip_serializing_if = "Option::is_none")]
    pub versioned_component_id: Option<String>,
    /// The id of parent process group of this component if applicable.
    #[serde(rename = "parentGroupId", skip_serializing_if = "Option::is_none")]
    pub parent_group_id: Option<String>,
    #[serde(rename = "position", skip_serializing_if = "Option::is_none")]
    pub position: Option<Box<crate::models::PositionDto>>,
    /// The name of the processor.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The type of the processor.
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub _type: Option<String>,
    #[serde(rename = "bundle", skip_serializing_if = "Option::is_none")]
    pub bundle: Option<Box<crate::models::BundleDto>>,
    /// The state of the processor
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<State>,
    /// Styles for the processor (background-color : #eee).
    #[serde(rename = "style", skip_serializing_if = "Option::is_none")]
    pub style: Option<::std::collections::HashMap<String, String>>,
    /// The available relationships that the processor currently supports.
    #[serde(rename = "relationships", skip_serializing_if = "Option::is_none")]
    pub relationships: Option<Vec<crate::models::RelationshipDto>>,
    /// The description of the processor.
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Whether the processor supports parallel processing.
    #[serde(rename = "supportsParallelProcessing", skip_serializing_if = "Option::is_none")]
    pub supports_parallel_processing: Option<bool>,
    /// Whether the processor supports event driven scheduling.
    #[serde(rename = "supportsEventDriven", skip_serializing_if = "Option::is_none")]
    pub supports_event_driven: Option<bool>,
    /// Whether the processor supports batching. This makes the run duration settings available.
    #[serde(rename = "supportsBatching", skip_serializing_if = "Option::is_none")]
    pub supports_batching: Option<bool>,
    /// Whether the processor persists state.
    #[serde(rename = "persistsState", skip_serializing_if = "Option::is_none")]
    pub persists_state: Option<bool>,
    /// Whether the processor requires elevated privileges.
    #[serde(rename = "restricted", skip_serializing_if = "Option::is_none")]
    pub restricted: Option<bool>,
    /// Whether the processor has been deprecated.
    #[serde(rename = "deprecated", skip_serializing_if = "Option::is_none")]
    pub deprecated: Option<bool>,
    /// Indicates if the execution node of a processor is restricted to run only on the primary node
    #[serde(rename = "executionNodeRestricted", skip_serializing_if = "Option::is_none")]
    pub execution_node_restricted: Option<bool>,
    /// Whether the processor has multiple versions available.
    #[serde(rename = "multipleVersionsAvailable", skip_serializing_if = "Option::is_none")]
    pub multiple_versions_available: Option<bool>,
    /// The input requirement for this processor.
    #[serde(rename = "inputRequirement", skip_serializing_if = "Option::is_none")]
    pub input_requirement: Option<String>,
    #[serde(rename = "config", skip_serializing_if = "Option::is_none")]
    pub config: Option<Box<crate::models::ProcessorConfigDto>>,
    /// The validation errors for the processor. These validation errors represent the problems with the processor that must be resolved before it can be started.
    #[serde(rename = "validationErrors", skip_serializing_if = "Option::is_none")]
    pub validation_errors: Option<Vec<String>>,
    /// Indicates whether the Processor is valid, invalid, or still in the process of validating (i.e., it is unknown whether or not the Processor is valid)
    #[serde(rename = "validationStatus", skip_serializing_if = "Option::is_none")]
    pub validation_status: Option<ValidationStatus>,
    /// Whether the underlying extension is missing.
    #[serde(rename = "extensionMissing", skip_serializing_if = "Option::is_none")]
    pub extension_missing: Option<bool>,
}

impl ProcessorDto {
    pub fn new() -> ProcessorDto {
        ProcessorDto {
            id: None,
            versioned_component_id: None,
            parent_group_id: None,
            position: None,
            name: None,
            _type: None,
            bundle: None,
            state: None,
            style: None,
            relationships: None,
            description: None,
            supports_parallel_processing: None,
            supports_event_driven: None,
            supports_batching: None,
            persists_state: None,
            restricted: None,
            deprecated: None,
            execution_node_restricted: None,
            multiple_versions_available: None,
            input_requirement: None,
            config: None,
            validation_errors: None,
            validation_status: None,
            extension_missing: None,
        }
    }
}

/// The state of the processor
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum State {
    #[serde(rename = "RUNNING")]
    RUNNING,
    #[serde(rename = "STOPPED")]
    STOPPED,
    #[serde(rename = "DISABLED")]
    DISABLED,
}

impl Default for State {
    fn default() -> State {
        Self::RUNNING
    }
}
/// Indicates whether the Processor is valid, invalid, or still in the process of validating (i.e., it is unknown whether or not the Processor is valid)
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ValidationStatus {
    #[serde(rename = "VALID")]
    VALID,
    #[serde(rename = "INVALID")]
    INVALID,
    #[serde(rename = "VALIDATING")]
    VALIDATING,
}

impl Default for ValidationStatus {
    fn default() -> ValidationStatus {
        Self::VALID
    }
}

