/*
 * NiFi Rest API
 *
 * The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: dev@nifi.apache.org
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ConnectionDiagnosticsDto {
    #[serde(rename = "connection", skip_serializing_if = "Option::is_none")]
    pub connection: Option<Box<crate::models::ConnectionDto>>,
    #[serde(rename = "aggregateSnapshot", skip_serializing_if = "Option::is_none")]
    pub aggregate_snapshot: Option<Box<crate::models::ConnectionDiagnosticsSnapshotDto>>,
    /// A list of values for each node in the cluster, if clustered.
    #[serde(rename = "nodeSnapshots", skip_serializing_if = "Option::is_none")]
    pub node_snapshots: Option<Vec<crate::models::ConnectionDiagnosticsSnapshotDto>>,
}

impl ConnectionDiagnosticsDto {
    pub fn new() -> ConnectionDiagnosticsDto {
        ConnectionDiagnosticsDto {
            connection: None,
            aggregate_snapshot: None,
            node_snapshots: None,
        }
    }
}


