/*
 * NiFi Rest API
 *
 * The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: dev@nifi.apache.org
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ProvenanceRequestDto {
    /// The search terms used to perform the search.
    #[serde(rename = "searchTerms", skip_serializing_if = "Option::is_none")]
    pub search_terms: Option<::std::collections::HashMap<String, crate::models::ProvenanceSearchValueDto>>,
    /// The id of the node in the cluster where this provenance originated.
    #[serde(rename = "clusterNodeId", skip_serializing_if = "Option::is_none")]
    pub cluster_node_id: Option<String>,
    /// The earliest event time to include in the query.
    #[serde(rename = "startDate", skip_serializing_if = "Option::is_none")]
    pub start_date: Option<String>,
    /// The latest event time to include in the query.
    #[serde(rename = "endDate", skip_serializing_if = "Option::is_none")]
    pub end_date: Option<String>,
    /// The minimum file size to include in the query.
    #[serde(rename = "minimumFileSize", skip_serializing_if = "Option::is_none")]
    pub minimum_file_size: Option<String>,
    /// The maximum file size to include in the query.
    #[serde(rename = "maximumFileSize", skip_serializing_if = "Option::is_none")]
    pub maximum_file_size: Option<String>,
    /// The maximum number of results to include.
    #[serde(rename = "maxResults", skip_serializing_if = "Option::is_none")]
    pub max_results: Option<i32>,
    /// Whether or not to summarize provenance events returned. This property is false by default.
    #[serde(rename = "summarize", skip_serializing_if = "Option::is_none")]
    pub summarize: Option<bool>,
    /// Whether or not incremental results are returned. If false, provenance events are only returned once the query completes. This property is true by default.
    #[serde(rename = "incrementalResults", skip_serializing_if = "Option::is_none")]
    pub incremental_results: Option<bool>,
}

impl ProvenanceRequestDto {
    pub fn new() -> ProvenanceRequestDto {
        ProvenanceRequestDto {
            search_terms: None,
            cluster_node_id: None,
            start_date: None,
            end_date: None,
            minimum_file_size: None,
            maximum_file_size: None,
            max_results: None,
            summarize: None,
            incremental_results: None,
        }
    }
}


