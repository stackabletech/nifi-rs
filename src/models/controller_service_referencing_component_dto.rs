/*
 * NiFi Rest API
 *
 * The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: dev@nifi.apache.org
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ControllerServiceReferencingComponentDto {
    /// The group id for the component referencing a controller service. If this component is another controller service or a reporting task, this field is blank.
    #[serde(rename = "groupId", skip_serializing_if = "Option::is_none")]
    pub group_id: Option<String>,
    /// The id of the component referencing a controller service.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The name of the component referencing a controller service.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The type of the component referencing a controller service in simple Java class name format without package name.
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub _type: Option<String>,
    /// The scheduled state of a processor or reporting task referencing a controller service. If this component is another controller service, this field represents the controller service state.
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
    /// The properties for the component.
    #[serde(rename = "properties", skip_serializing_if = "Option::is_none")]
    pub properties: Option<::std::collections::HashMap<String, String>>,
    /// The descriptors for the component properties.
    #[serde(rename = "descriptors", skip_serializing_if = "Option::is_none")]
    pub descriptors: Option<::std::collections::HashMap<String, crate::models::PropertyDescriptorDto>>,
    /// The validation errors for the component.
    #[serde(rename = "validationErrors", skip_serializing_if = "Option::is_none")]
    pub validation_errors: Option<Vec<String>>,
    /// The type of reference this is.
    #[serde(rename = "referenceType", skip_serializing_if = "Option::is_none")]
    pub reference_type: Option<ReferenceType>,
    /// The number of active threads for the referencing component.
    #[serde(rename = "activeThreadCount", skip_serializing_if = "Option::is_none")]
    pub active_thread_count: Option<i32>,
    /// If the referencing component represents a controller service, this indicates whether it has already been represented in this hierarchy.
    #[serde(rename = "referenceCycle", skip_serializing_if = "Option::is_none")]
    pub reference_cycle: Option<bool>,
    /// If the referencing component represents a controller service, these are the components that reference it.
    #[serde(rename = "referencingComponents", skip_serializing_if = "Option::is_none")]
    pub referencing_components: Option<Vec<crate::models::ControllerServiceReferencingComponentEntity>>,
}

impl ControllerServiceReferencingComponentDto {
    pub fn new() -> ControllerServiceReferencingComponentDto {
        ControllerServiceReferencingComponentDto {
            group_id: None,
            id: None,
            name: None,
            _type: None,
            state: None,
            properties: None,
            descriptors: None,
            validation_errors: None,
            reference_type: None,
            active_thread_count: None,
            reference_cycle: None,
            referencing_components: None,
        }
    }
}

/// The type of reference this is.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ReferenceType {
    #[serde(rename = "Processor")]
    Processor,
    #[serde(rename = "ControllerService")]
    ControllerService,
    #[serde(rename = "ReportingTask")]
    ReportingTask,
}

impl Default for ReferenceType {
    fn default() -> ReferenceType {
        Self::Processor
    }
}

