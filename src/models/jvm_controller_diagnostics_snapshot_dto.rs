/*
 * NiFi Rest API
 *
 * The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: dev@nifi.apache.org
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct JvmControllerDiagnosticsSnapshotDto {
    /// Whether or not this node is primary node
    #[serde(rename = "primaryNode", skip_serializing_if = "Option::is_none")]
    pub primary_node: Option<bool>,
    /// Whether or not this node is cluster coordinator
    #[serde(rename = "clusterCoordinator", skip_serializing_if = "Option::is_none")]
    pub cluster_coordinator: Option<bool>,
    /// The maximum number of timer-driven threads
    #[serde(rename = "maxTimerDrivenThreads", skip_serializing_if = "Option::is_none")]
    pub max_timer_driven_threads: Option<i32>,
    /// The maximum number of event-driven threads
    #[serde(rename = "maxEventDrivenThreads", skip_serializing_if = "Option::is_none")]
    pub max_event_driven_threads: Option<i32>,
}

impl JvmControllerDiagnosticsSnapshotDto {
    pub fn new() -> JvmControllerDiagnosticsSnapshotDto {
        JvmControllerDiagnosticsSnapshotDto {
            primary_node: None,
            cluster_coordinator: None,
            max_timer_driven_threads: None,
            max_event_driven_threads: None,
        }
    }
}


