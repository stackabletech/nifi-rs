/*
 * NiFi Rest API
 *
 * The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: dev@nifi.apache.org
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct SystemDiagnosticsSnapshotDto {
    /// Total size of non heap.
    #[serde(rename = "totalNonHeap", skip_serializing_if = "Option::is_none")]
    pub total_non_heap: Option<String>,
    /// Total number of bytes allocated to the JVM not used for heap
    #[serde(rename = "totalNonHeapBytes", skip_serializing_if = "Option::is_none")]
    pub total_non_heap_bytes: Option<i64>,
    /// Amount of use non heap.
    #[serde(rename = "usedNonHeap", skip_serializing_if = "Option::is_none")]
    pub used_non_heap: Option<String>,
    /// Total number of bytes used by the JVM not in the heap space
    #[serde(rename = "usedNonHeapBytes", skip_serializing_if = "Option::is_none")]
    pub used_non_heap_bytes: Option<i64>,
    /// Amount of free non heap.
    #[serde(rename = "freeNonHeap", skip_serializing_if = "Option::is_none")]
    pub free_non_heap: Option<String>,
    /// Total number of free non-heap bytes available to the JVM
    #[serde(rename = "freeNonHeapBytes", skip_serializing_if = "Option::is_none")]
    pub free_non_heap_bytes: Option<i64>,
    /// Maximum size of non heap.
    #[serde(rename = "maxNonHeap", skip_serializing_if = "Option::is_none")]
    pub max_non_heap: Option<String>,
    /// The maximum number of bytes that the JVM can use for non-heap purposes
    #[serde(rename = "maxNonHeapBytes", skip_serializing_if = "Option::is_none")]
    pub max_non_heap_bytes: Option<i64>,
    /// Utilization of non heap.
    #[serde(rename = "nonHeapUtilization", skip_serializing_if = "Option::is_none")]
    pub non_heap_utilization: Option<String>,
    /// Total size of heap.
    #[serde(rename = "totalHeap", skip_serializing_if = "Option::is_none")]
    pub total_heap: Option<String>,
    /// The total number of bytes that are available for the JVM heap to use
    #[serde(rename = "totalHeapBytes", skip_serializing_if = "Option::is_none")]
    pub total_heap_bytes: Option<i64>,
    /// Amount of used heap.
    #[serde(rename = "usedHeap", skip_serializing_if = "Option::is_none")]
    pub used_heap: Option<String>,
    /// The number of bytes of JVM heap that are currently being used
    #[serde(rename = "usedHeapBytes", skip_serializing_if = "Option::is_none")]
    pub used_heap_bytes: Option<i64>,
    /// Amount of free heap.
    #[serde(rename = "freeHeap", skip_serializing_if = "Option::is_none")]
    pub free_heap: Option<String>,
    /// The number of bytes that are allocated to the JVM heap but not currently being used
    #[serde(rename = "freeHeapBytes", skip_serializing_if = "Option::is_none")]
    pub free_heap_bytes: Option<i64>,
    /// Maximum size of heap.
    #[serde(rename = "maxHeap", skip_serializing_if = "Option::is_none")]
    pub max_heap: Option<String>,
    /// The maximum number of bytes that can be used by the JVM
    #[serde(rename = "maxHeapBytes", skip_serializing_if = "Option::is_none")]
    pub max_heap_bytes: Option<i64>,
    /// Utilization of heap.
    #[serde(rename = "heapUtilization", skip_serializing_if = "Option::is_none")]
    pub heap_utilization: Option<String>,
    /// Number of available processors if supported by the underlying system.
    #[serde(rename = "availableProcessors", skip_serializing_if = "Option::is_none")]
    pub available_processors: Option<i32>,
    /// The processor load average if supported by the underlying system.
    #[serde(rename = "processorLoadAverage", skip_serializing_if = "Option::is_none")]
    pub processor_load_average: Option<f64>,
    /// Total number of threads.
    #[serde(rename = "totalThreads", skip_serializing_if = "Option::is_none")]
    pub total_threads: Option<i32>,
    /// Number of daemon threads.
    #[serde(rename = "daemonThreads", skip_serializing_if = "Option::is_none")]
    pub daemon_threads: Option<i32>,
    /// The uptime of the Java virtual machine
    #[serde(rename = "uptime", skip_serializing_if = "Option::is_none")]
    pub uptime: Option<String>,
    #[serde(rename = "flowFileRepositoryStorageUsage", skip_serializing_if = "Option::is_none")]
    pub flow_file_repository_storage_usage: Option<Box<crate::models::StorageUsageDto>>,
    /// The content repository storage usage.
    #[serde(rename = "contentRepositoryStorageUsage", skip_serializing_if = "Option::is_none")]
    pub content_repository_storage_usage: Option<Vec<crate::models::StorageUsageDto>>,
    /// The provenance repository storage usage.
    #[serde(rename = "provenanceRepositoryStorageUsage", skip_serializing_if = "Option::is_none")]
    pub provenance_repository_storage_usage: Option<Vec<crate::models::StorageUsageDto>>,
    /// The garbage collection details.
    #[serde(rename = "garbageCollection", skip_serializing_if = "Option::is_none")]
    pub garbage_collection: Option<Vec<crate::models::GarbageCollectionDto>>,
    /// When the diagnostics were generated.
    #[serde(rename = "statsLastRefreshed", skip_serializing_if = "Option::is_none")]
    pub stats_last_refreshed: Option<String>,
    #[serde(rename = "versionInfo", skip_serializing_if = "Option::is_none")]
    pub version_info: Option<Box<crate::models::VersionInfoDto>>,
}

impl SystemDiagnosticsSnapshotDto {
    pub fn new() -> SystemDiagnosticsSnapshotDto {
        SystemDiagnosticsSnapshotDto {
            total_non_heap: None,
            total_non_heap_bytes: None,
            used_non_heap: None,
            used_non_heap_bytes: None,
            free_non_heap: None,
            free_non_heap_bytes: None,
            max_non_heap: None,
            max_non_heap_bytes: None,
            non_heap_utilization: None,
            total_heap: None,
            total_heap_bytes: None,
            used_heap: None,
            used_heap_bytes: None,
            free_heap: None,
            free_heap_bytes: None,
            max_heap: None,
            max_heap_bytes: None,
            heap_utilization: None,
            available_processors: None,
            processor_load_average: None,
            total_threads: None,
            daemon_threads: None,
            uptime: None,
            flow_file_repository_storage_usage: None,
            content_repository_storage_usage: None,
            provenance_repository_storage_usage: None,
            garbage_collection: None,
            stats_last_refreshed: None,
            version_info: None,
        }
    }
}


