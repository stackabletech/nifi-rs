/*
 * NiFi Rest API
 *
 * The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: dev@nifi.apache.org
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ComponentStateDto {
    /// The component identifier.
    #[serde(rename = "componentId", skip_serializing_if = "Option::is_none")]
    pub component_id: Option<String>,
    /// Description of the state this component persists.
    #[serde(rename = "stateDescription", skip_serializing_if = "Option::is_none")]
    pub state_description: Option<String>,
    #[serde(rename = "clusterState", skip_serializing_if = "Option::is_none")]
    pub cluster_state: Option<Box<crate::models::StateMapDto>>,
    #[serde(rename = "localState", skip_serializing_if = "Option::is_none")]
    pub local_state: Option<Box<crate::models::StateMapDto>>,
}

impl ComponentStateDto {
    pub fn new() -> ComponentStateDto {
        ComponentStateDto {
            component_id: None,
            state_description: None,
            cluster_state: None,
            local_state: None,
        }
    }
}


