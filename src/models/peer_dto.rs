/*
 * NiFi Rest API
 *
 * The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: dev@nifi.apache.org
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct PeerDto {
    /// The hostname of this peer.
    #[serde(rename = "hostname", skip_serializing_if = "Option::is_none")]
    pub hostname: Option<String>,
    /// The port number of this peer.
    #[serde(rename = "port", skip_serializing_if = "Option::is_none")]
    pub port: Option<i32>,
    /// Returns if this peer connection is secure.
    #[serde(rename = "secure", skip_serializing_if = "Option::is_none")]
    pub secure: Option<bool>,
    /// The number of flowFiles this peer holds.
    #[serde(rename = "flowFileCount", skip_serializing_if = "Option::is_none")]
    pub flow_file_count: Option<i32>,
}

impl PeerDto {
    pub fn new() -> PeerDto {
        PeerDto {
            hostname: None,
            port: None,
            secure: None,
            flow_file_count: None,
        }
    }
}


