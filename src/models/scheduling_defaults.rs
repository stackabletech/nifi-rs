/*
 * NiFi Rest API
 *
 * The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: dev@nifi.apache.org
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct SchedulingDefaults {
    /// The name of the default scheduling strategy
    #[serde(rename = "defaultSchedulingStrategy", skip_serializing_if = "Option::is_none")]
    pub default_scheduling_strategy: Option<DefaultSchedulingStrategy>,
    /// The default scheduling period in milliseconds
    #[serde(rename = "defaultSchedulingPeriodMillis", skip_serializing_if = "Option::is_none")]
    pub default_scheduling_period_millis: Option<i64>,
    /// The default penalization period in milliseconds
    #[serde(rename = "penalizationPeriodMillis", skip_serializing_if = "Option::is_none")]
    pub penalization_period_millis: Option<i64>,
    /// The default yield duration in milliseconds
    #[serde(rename = "yieldDurationMillis", skip_serializing_if = "Option::is_none")]
    pub yield_duration_millis: Option<i64>,
    /// The default run duration in nano-seconds
    #[serde(rename = "defaultRunDurationNanos", skip_serializing_if = "Option::is_none")]
    pub default_run_duration_nanos: Option<i64>,
    /// The default concurrent tasks
    #[serde(rename = "defaultMaxConcurrentTasks", skip_serializing_if = "Option::is_none")]
    pub default_max_concurrent_tasks: Option<String>,
    /// The default concurrent tasks for each scheduling strategy
    #[serde(rename = "defaultConcurrentTasksBySchedulingStrategy", skip_serializing_if = "Option::is_none")]
    pub default_concurrent_tasks_by_scheduling_strategy: Option<::std::collections::HashMap<String, i32>>,
    /// The default scheduling period for each scheduling strategy
    #[serde(rename = "defaultSchedulingPeriodsBySchedulingStrategy", skip_serializing_if = "Option::is_none")]
    pub default_scheduling_periods_by_scheduling_strategy: Option<::std::collections::HashMap<String, String>>,
}

impl SchedulingDefaults {
    pub fn new() -> SchedulingDefaults {
        SchedulingDefaults {
            default_scheduling_strategy: None,
            default_scheduling_period_millis: None,
            penalization_period_millis: None,
            yield_duration_millis: None,
            default_run_duration_nanos: None,
            default_max_concurrent_tasks: None,
            default_concurrent_tasks_by_scheduling_strategy: None,
            default_scheduling_periods_by_scheduling_strategy: None,
        }
    }
}

/// The name of the default scheduling strategy
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum DefaultSchedulingStrategy {
    #[serde(rename = "EVENT_DRIVEN")]
    EVENTDRIVEN,
    #[serde(rename = "TIMER_DRIVEN")]
    TIMERDRIVEN,
    #[serde(rename = "PRIMARY_NODE_ONLY")]
    PRIMARYNODEONLY,
    #[serde(rename = "CRON_DRIVEN")]
    CRONDRIVEN,
}

impl Default for DefaultSchedulingStrategy {
    fn default() -> DefaultSchedulingStrategy {
        Self::EVENTDRIVEN
    }
}

