/*
 * NiFi Rest API
 *
 * The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: dev@nifi.apache.org
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct InstantiateTemplateRequestEntity {
    /// The x coordinate of the origin of the bounding box where the new components will be placed.
    #[serde(rename = "originX", skip_serializing_if = "Option::is_none")]
    pub origin_x: Option<f64>,
    /// The y coordinate of the origin of the bounding box where the new components will be placed.
    #[serde(rename = "originY", skip_serializing_if = "Option::is_none")]
    pub origin_y: Option<f64>,
    /// The identifier of the template.
    #[serde(rename = "templateId", skip_serializing_if = "Option::is_none")]
    pub template_id: Option<String>,
    /// The encoding version of the flow snippet. If not specified, this is automatically populated by the node receiving the user request. If the snippet is specified, the version will be the latest. If the snippet is not specified, the version will come from the underlying template. These details need to be replicated throughout the cluster to ensure consistency.
    #[serde(rename = "encodingVersion", skip_serializing_if = "Option::is_none")]
    pub encoding_version: Option<String>,
    #[serde(rename = "snippet", skip_serializing_if = "Option::is_none")]
    pub snippet: Option<Box<crate::models::FlowSnippetDto>>,
    /// Acknowledges that this node is disconnected to allow for mutable requests to proceed.
    #[serde(rename = "disconnectedNodeAcknowledged", skip_serializing_if = "Option::is_none")]
    pub disconnected_node_acknowledged: Option<bool>,
}

impl InstantiateTemplateRequestEntity {
    pub fn new() -> InstantiateTemplateRequestEntity {
        InstantiateTemplateRequestEntity {
            origin_x: None,
            origin_y: None,
            template_id: None,
            encoding_version: None,
            snippet: None,
            disconnected_node_acknowledged: None,
        }
    }
}


