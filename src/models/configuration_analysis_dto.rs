/*
 * NiFi Rest API
 *
 * The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: dev@nifi.apache.org
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ConfigurationAnalysisDto {
    /// The ID of the component
    #[serde(rename = "componentId", skip_serializing_if = "Option::is_none")]
    pub component_id: Option<String>,
    /// The configured properties for the component
    #[serde(rename = "properties", skip_serializing_if = "Option::is_none")]
    pub properties: Option<::std::collections::HashMap<String, String>>,
    /// The attributes that are referenced by the properties, mapped to recently used values
    #[serde(rename = "referencedAttributes", skip_serializing_if = "Option::is_none")]
    pub referenced_attributes: Option<::std::collections::HashMap<String, String>>,
    /// Whether or not the component supports verification
    #[serde(rename = "supportsVerification", skip_serializing_if = "Option::is_none")]
    pub supports_verification: Option<bool>,
}

impl ConfigurationAnalysisDto {
    pub fn new() -> ConfigurationAnalysisDto {
        ConfigurationAnalysisDto {
            component_id: None,
            properties: None,
            referenced_attributes: None,
            supports_verification: None,
        }
    }
}


