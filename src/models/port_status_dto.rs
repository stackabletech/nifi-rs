/*
 * NiFi Rest API
 *
 * The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: dev@nifi.apache.org
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct PortStatusDto {
    /// The id of the port.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The id of the parent process group of the port.
    #[serde(rename = "groupId", skip_serializing_if = "Option::is_none")]
    pub group_id: Option<String>,
    /// The name of the port.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Whether the port has incoming or outgoing connections to a remote NiFi.
    #[serde(rename = "transmitting", skip_serializing_if = "Option::is_none")]
    pub transmitting: Option<bool>,
    /// The run status of the port.
    #[serde(rename = "runStatus", skip_serializing_if = "Option::is_none")]
    pub run_status: Option<RunStatus>,
    /// The time the status for the process group was last refreshed.
    #[serde(rename = "statsLastRefreshed", skip_serializing_if = "Option::is_none")]
    pub stats_last_refreshed: Option<String>,
    #[serde(rename = "aggregateSnapshot", skip_serializing_if = "Option::is_none")]
    pub aggregate_snapshot: Option<Box<crate::models::PortStatusSnapshotDto>>,
    /// A status snapshot for each node in the cluster. If the NiFi instance is a standalone instance, rather than a cluster, this may be null.
    #[serde(rename = "nodeSnapshots", skip_serializing_if = "Option::is_none")]
    pub node_snapshots: Option<Vec<crate::models::NodePortStatusSnapshotDto>>,
}

impl PortStatusDto {
    pub fn new() -> PortStatusDto {
        PortStatusDto {
            id: None,
            group_id: None,
            name: None,
            transmitting: None,
            run_status: None,
            stats_last_refreshed: None,
            aggregate_snapshot: None,
            node_snapshots: None,
        }
    }
}

/// The run status of the port.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum RunStatus {
    #[serde(rename = "Running")]
    Running,
    #[serde(rename = "Stopped")]
    Stopped,
    #[serde(rename = "Validating")]
    Validating,
    #[serde(rename = "Disabled")]
    Disabled,
    #[serde(rename = "Invalid")]
    Invalid,
}

impl Default for RunStatus {
    fn default() -> RunStatus {
        Self::Running
    }
}

