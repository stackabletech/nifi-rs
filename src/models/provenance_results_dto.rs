/*
 * NiFi Rest API
 *
 * The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: dev@nifi.apache.org
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ProvenanceResultsDto {
    /// The provenance events that matched the search criteria.
    #[serde(rename = "provenanceEvents", skip_serializing_if = "Option::is_none")]
    pub provenance_events: Option<Vec<crate::models::ProvenanceEventDto>>,
    /// The total number of results formatted.
    #[serde(rename = "total", skip_serializing_if = "Option::is_none")]
    pub total: Option<String>,
    /// The total number of results.
    #[serde(rename = "totalCount", skip_serializing_if = "Option::is_none")]
    pub total_count: Option<i64>,
    /// Then the search was performed.
    #[serde(rename = "generated", skip_serializing_if = "Option::is_none")]
    pub generated: Option<String>,
    /// The oldest event available in the provenance repository.
    #[serde(rename = "oldestEvent", skip_serializing_if = "Option::is_none")]
    pub oldest_event: Option<String>,
    /// The time offset of the server that's used for event time.
    #[serde(rename = "timeOffset", skip_serializing_if = "Option::is_none")]
    pub time_offset: Option<i32>,
    /// Any errors that occurred while performing the provenance request.
    #[serde(rename = "errors", skip_serializing_if = "Option::is_none")]
    pub errors: Option<Vec<String>>,
}

impl ProvenanceResultsDto {
    pub fn new() -> ProvenanceResultsDto {
        ProvenanceResultsDto {
            provenance_events: None,
            total: None,
            total_count: None,
            generated: None,
            oldest_event: None,
            time_offset: None,
            errors: None,
        }
    }
}


