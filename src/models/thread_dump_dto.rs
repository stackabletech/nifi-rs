/*
 * NiFi Rest API
 *
 * The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: dev@nifi.apache.org
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ThreadDumpDto {
    /// The ID of the node in the cluster
    #[serde(rename = "nodeId", skip_serializing_if = "Option::is_none")]
    pub node_id: Option<String>,
    /// The address of the node in the cluster
    #[serde(rename = "nodeAddress", skip_serializing_if = "Option::is_none")]
    pub node_address: Option<String>,
    /// The port the node is listening for API requests.
    #[serde(rename = "apiPort", skip_serializing_if = "Option::is_none")]
    pub api_port: Option<i32>,
    /// The stack trace for the thread
    #[serde(rename = "stackTrace", skip_serializing_if = "Option::is_none")]
    pub stack_trace: Option<String>,
    /// The name of the thread
    #[serde(rename = "threadName", skip_serializing_if = "Option::is_none")]
    pub thread_name: Option<String>,
    /// The number of milliseconds that the thread has been executing in the Processor
    #[serde(rename = "threadActiveMillis", skip_serializing_if = "Option::is_none")]
    pub thread_active_millis: Option<i64>,
    /// Indicates whether or not the user has requested that the task be terminated. If this is true, it may indicate that the thread is in a state where it will continue running indefinitely without returning.
    #[serde(rename = "taskTerminated", skip_serializing_if = "Option::is_none")]
    pub task_terminated: Option<bool>,
}

impl ThreadDumpDto {
    pub fn new() -> ThreadDumpDto {
        ThreadDumpDto {
            node_id: None,
            node_address: None,
            api_port: None,
            stack_trace: None,
            thread_name: None,
            thread_active_millis: None,
            task_terminated: None,
        }
    }
}


