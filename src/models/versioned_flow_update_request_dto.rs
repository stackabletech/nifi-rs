/*
 * NiFi Rest API
 *
 * The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: dev@nifi.apache.org
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct VersionedFlowUpdateRequestDto {
    /// The unique ID of this request.
    #[serde(rename = "requestId", skip_serializing_if = "Option::is_none")]
    pub request_id: Option<String>,
    /// The unique ID of the Process Group being updated
    #[serde(rename = "processGroupId", skip_serializing_if = "Option::is_none")]
    pub process_group_id: Option<String>,
    /// The URI for future requests to this drop request.
    #[serde(rename = "uri", skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
    /// The last time this request was updated.
    #[serde(rename = "lastUpdated", skip_serializing_if = "Option::is_none")]
    pub last_updated: Option<String>,
    /// Whether or not this request has completed
    #[serde(rename = "complete", skip_serializing_if = "Option::is_none")]
    pub complete: Option<bool>,
    /// An explanation of why this request failed, or null if this request has not failed
    #[serde(rename = "failureReason", skip_serializing_if = "Option::is_none")]
    pub failure_reason: Option<String>,
    /// The percentage complete for the request, between 0 and 100
    #[serde(rename = "percentCompleted", skip_serializing_if = "Option::is_none")]
    pub percent_completed: Option<i32>,
    /// The state of the request
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
    #[serde(rename = "versionControlInformation", skip_serializing_if = "Option::is_none")]
    pub version_control_information: Option<Box<crate::models::VersionControlInformationDto>>,
}

impl VersionedFlowUpdateRequestDto {
    pub fn new() -> VersionedFlowUpdateRequestDto {
        VersionedFlowUpdateRequestDto {
            request_id: None,
            process_group_id: None,
            uri: None,
            last_updated: None,
            complete: None,
            failure_reason: None,
            percent_completed: None,
            state: None,
            version_control_information: None,
        }
    }
}


