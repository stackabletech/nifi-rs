/*
 * NiFi Rest API
 *
 * The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: dev@nifi.apache.org
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ProcessGroupStatusSnapshotDto {
    /// The id of the process group.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The name of this process group.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The status of all connections in the process group.
    #[serde(rename = "connectionStatusSnapshots", skip_serializing_if = "Option::is_none")]
    pub connection_status_snapshots: Option<Vec<crate::models::ConnectionStatusSnapshotEntity>>,
    /// The status of all processors in the process group.
    #[serde(rename = "processorStatusSnapshots", skip_serializing_if = "Option::is_none")]
    pub processor_status_snapshots: Option<Vec<crate::models::ProcessorStatusSnapshotEntity>>,
    /// The status of all process groups in the process group.
    #[serde(rename = "processGroupStatusSnapshots", skip_serializing_if = "Option::is_none")]
    pub process_group_status_snapshots: Option<Vec<crate::models::ProcessGroupStatusSnapshotEntity>>,
    /// The status of all remote process groups in the process group.
    #[serde(rename = "remoteProcessGroupStatusSnapshots", skip_serializing_if = "Option::is_none")]
    pub remote_process_group_status_snapshots: Option<Vec<crate::models::RemoteProcessGroupStatusSnapshotEntity>>,
    /// The status of all input ports in the process group.
    #[serde(rename = "inputPortStatusSnapshots", skip_serializing_if = "Option::is_none")]
    pub input_port_status_snapshots: Option<Vec<crate::models::PortStatusSnapshotEntity>>,
    /// The status of all output ports in the process group.
    #[serde(rename = "outputPortStatusSnapshots", skip_serializing_if = "Option::is_none")]
    pub output_port_status_snapshots: Option<Vec<crate::models::PortStatusSnapshotEntity>>,
    /// The current state of the Process Group, as it relates to the Versioned Flow
    #[serde(rename = "versionedFlowState", skip_serializing_if = "Option::is_none")]
    pub versioned_flow_state: Option<VersionedFlowState>,
    /// The number of FlowFiles that have come into this ProcessGroup in the last 5 minutes
    #[serde(rename = "flowFilesIn", skip_serializing_if = "Option::is_none")]
    pub flow_files_in: Option<i32>,
    /// The number of bytes that have come into this ProcessGroup in the last 5 minutes
    #[serde(rename = "bytesIn", skip_serializing_if = "Option::is_none")]
    pub bytes_in: Option<i64>,
    /// The input count/size for the process group in the last 5 minutes (pretty printed).
    #[serde(rename = "input", skip_serializing_if = "Option::is_none")]
    pub input: Option<String>,
    /// The number of FlowFiles that are queued up in this ProcessGroup right now
    #[serde(rename = "flowFilesQueued", skip_serializing_if = "Option::is_none")]
    pub flow_files_queued: Option<i32>,
    /// The number of bytes that are queued up in this ProcessGroup right now
    #[serde(rename = "bytesQueued", skip_serializing_if = "Option::is_none")]
    pub bytes_queued: Option<i64>,
    /// The count/size that is queued in the the process group.
    #[serde(rename = "queued", skip_serializing_if = "Option::is_none")]
    pub queued: Option<String>,
    /// The count that is queued for the process group.
    #[serde(rename = "queuedCount", skip_serializing_if = "Option::is_none")]
    pub queued_count: Option<String>,
    /// The size that is queued for the process group.
    #[serde(rename = "queuedSize", skip_serializing_if = "Option::is_none")]
    pub queued_size: Option<String>,
    /// The number of bytes read by components in this ProcessGroup in the last 5 minutes
    #[serde(rename = "bytesRead", skip_serializing_if = "Option::is_none")]
    pub bytes_read: Option<i64>,
    /// The number of bytes read in the last 5 minutes.
    #[serde(rename = "read", skip_serializing_if = "Option::is_none")]
    pub read: Option<String>,
    /// The number of bytes written by components in this ProcessGroup in the last 5 minutes
    #[serde(rename = "bytesWritten", skip_serializing_if = "Option::is_none")]
    pub bytes_written: Option<i64>,
    /// The number of bytes written in the last 5 minutes.
    #[serde(rename = "written", skip_serializing_if = "Option::is_none")]
    pub written: Option<String>,
    /// The number of FlowFiles transferred out of this ProcessGroup in the last 5 minutes
    #[serde(rename = "flowFilesOut", skip_serializing_if = "Option::is_none")]
    pub flow_files_out: Option<i32>,
    /// The number of bytes transferred out of this ProcessGroup in the last 5 minutes
    #[serde(rename = "bytesOut", skip_serializing_if = "Option::is_none")]
    pub bytes_out: Option<i64>,
    /// The output count/size for the process group in the last 5 minutes.
    #[serde(rename = "output", skip_serializing_if = "Option::is_none")]
    pub output: Option<String>,
    /// The number of FlowFiles transferred in this ProcessGroup in the last 5 minutes
    #[serde(rename = "flowFilesTransferred", skip_serializing_if = "Option::is_none")]
    pub flow_files_transferred: Option<i32>,
    /// The number of bytes transferred in this ProcessGroup in the last 5 minutes
    #[serde(rename = "bytesTransferred", skip_serializing_if = "Option::is_none")]
    pub bytes_transferred: Option<i64>,
    /// The count/size transferred to/from queues in the process group in the last 5 minutes.
    #[serde(rename = "transferred", skip_serializing_if = "Option::is_none")]
    pub transferred: Option<String>,
    /// The number of bytes received from external sources by components within this ProcessGroup in the last 5 minutes
    #[serde(rename = "bytesReceived", skip_serializing_if = "Option::is_none")]
    pub bytes_received: Option<i64>,
    /// The number of FlowFiles received from external sources by components within this ProcessGroup in the last 5 minutes
    #[serde(rename = "flowFilesReceived", skip_serializing_if = "Option::is_none")]
    pub flow_files_received: Option<i32>,
    /// The count/size sent to the process group in the last 5 minutes.
    #[serde(rename = "received", skip_serializing_if = "Option::is_none")]
    pub received: Option<String>,
    /// The number of bytes sent to an external sink by components within this ProcessGroup in the last 5 minutes
    #[serde(rename = "bytesSent", skip_serializing_if = "Option::is_none")]
    pub bytes_sent: Option<i64>,
    /// The number of FlowFiles sent to an external sink by components within this ProcessGroup in the last 5 minutes
    #[serde(rename = "flowFilesSent", skip_serializing_if = "Option::is_none")]
    pub flow_files_sent: Option<i32>,
    /// The count/size sent from this process group in the last 5 minutes.
    #[serde(rename = "sent", skip_serializing_if = "Option::is_none")]
    pub sent: Option<String>,
    /// The active thread count for this process group.
    #[serde(rename = "activeThreadCount", skip_serializing_if = "Option::is_none")]
    pub active_thread_count: Option<i32>,
    /// The number of threads currently terminated for the process group.
    #[serde(rename = "terminatedThreadCount", skip_serializing_if = "Option::is_none")]
    pub terminated_thread_count: Option<i32>,
}

impl ProcessGroupStatusSnapshotDto {
    pub fn new() -> ProcessGroupStatusSnapshotDto {
        ProcessGroupStatusSnapshotDto {
            id: None,
            name: None,
            connection_status_snapshots: None,
            processor_status_snapshots: None,
            process_group_status_snapshots: None,
            remote_process_group_status_snapshots: None,
            input_port_status_snapshots: None,
            output_port_status_snapshots: None,
            versioned_flow_state: None,
            flow_files_in: None,
            bytes_in: None,
            input: None,
            flow_files_queued: None,
            bytes_queued: None,
            queued: None,
            queued_count: None,
            queued_size: None,
            bytes_read: None,
            read: None,
            bytes_written: None,
            written: None,
            flow_files_out: None,
            bytes_out: None,
            output: None,
            flow_files_transferred: None,
            bytes_transferred: None,
            transferred: None,
            bytes_received: None,
            flow_files_received: None,
            received: None,
            bytes_sent: None,
            flow_files_sent: None,
            sent: None,
            active_thread_count: None,
            terminated_thread_count: None,
        }
    }
}

/// The current state of the Process Group, as it relates to the Versioned Flow
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum VersionedFlowState {
    #[serde(rename = "LOCALLY_MODIFIED")]
    LOCALLYMODIFIED,
    #[serde(rename = "STALE")]
    STALE,
    #[serde(rename = "LOCALLY_MODIFIED_AND_STALE")]
    LOCALLYMODIFIEDANDSTALE,
    #[serde(rename = "UP_TO_DATE")]
    UPTODATE,
    #[serde(rename = "SYNC_FAILURE")]
    SYNCFAILURE,
}

impl Default for VersionedFlowState {
    fn default() -> VersionedFlowState {
        Self::LOCALLYMODIFIED
    }
}

