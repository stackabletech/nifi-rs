/*
 * NiFi Rest API
 *
 * The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: dev@nifi.apache.org
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ControllerStatusDto {
    /// The number of active threads in the NiFi.
    #[serde(rename = "activeThreadCount", skip_serializing_if = "Option::is_none")]
    pub active_thread_count: Option<i32>,
    /// The number of terminated threads in the NiFi.
    #[serde(rename = "terminatedThreadCount", skip_serializing_if = "Option::is_none")]
    pub terminated_thread_count: Option<i32>,
    /// The number of flowfiles queued in the NiFi.
    #[serde(rename = "queued", skip_serializing_if = "Option::is_none")]
    pub queued: Option<String>,
    /// The number of FlowFiles queued across the entire flow
    #[serde(rename = "flowFilesQueued", skip_serializing_if = "Option::is_none")]
    pub flow_files_queued: Option<i32>,
    /// The size of the FlowFiles queued across the entire flow
    #[serde(rename = "bytesQueued", skip_serializing_if = "Option::is_none")]
    pub bytes_queued: Option<i64>,
    /// The number of running components in the NiFi.
    #[serde(rename = "runningCount", skip_serializing_if = "Option::is_none")]
    pub running_count: Option<i32>,
    /// The number of stopped components in the NiFi.
    #[serde(rename = "stoppedCount", skip_serializing_if = "Option::is_none")]
    pub stopped_count: Option<i32>,
    /// The number of invalid components in the NiFi.
    #[serde(rename = "invalidCount", skip_serializing_if = "Option::is_none")]
    pub invalid_count: Option<i32>,
    /// The number of disabled components in the NiFi.
    #[serde(rename = "disabledCount", skip_serializing_if = "Option::is_none")]
    pub disabled_count: Option<i32>,
    /// The number of active remote ports in the NiFi.
    #[serde(rename = "activeRemotePortCount", skip_serializing_if = "Option::is_none")]
    pub active_remote_port_count: Option<i32>,
    /// The number of inactive remote ports in the NiFi.
    #[serde(rename = "inactiveRemotePortCount", skip_serializing_if = "Option::is_none")]
    pub inactive_remote_port_count: Option<i32>,
    /// The number of up to date versioned process groups in the NiFi.
    #[serde(rename = "upToDateCount", skip_serializing_if = "Option::is_none")]
    pub up_to_date_count: Option<i32>,
    /// The number of locally modified versioned process groups in the NiFi.
    #[serde(rename = "locallyModifiedCount", skip_serializing_if = "Option::is_none")]
    pub locally_modified_count: Option<i32>,
    /// The number of stale versioned process groups in the NiFi.
    #[serde(rename = "staleCount", skip_serializing_if = "Option::is_none")]
    pub stale_count: Option<i32>,
    /// The number of locally modified and stale versioned process groups in the NiFi.
    #[serde(rename = "locallyModifiedAndStaleCount", skip_serializing_if = "Option::is_none")]
    pub locally_modified_and_stale_count: Option<i32>,
    /// The number of versioned process groups in the NiFi that are unable to sync to a registry.
    #[serde(rename = "syncFailureCount", skip_serializing_if = "Option::is_none")]
    pub sync_failure_count: Option<i32>,
}

impl ControllerStatusDto {
    pub fn new() -> ControllerStatusDto {
        ControllerStatusDto {
            active_thread_count: None,
            terminated_thread_count: None,
            queued: None,
            flow_files_queued: None,
            bytes_queued: None,
            running_count: None,
            stopped_count: None,
            invalid_count: None,
            disabled_count: None,
            active_remote_port_count: None,
            inactive_remote_port_count: None,
            up_to_date_count: None,
            locally_modified_count: None,
            stale_count: None,
            locally_modified_and_stale_count: None,
            sync_failure_count: None,
        }
    }
}


