/*
 * NiFi Rest API
 *
 * The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: dev@nifi.apache.org
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ConnectableComponent {
    /// The id of the connectable component.
    #[serde(rename = "id")]
    pub id: String,
    /// The type of component the connectable is.
    #[serde(rename = "type")]
    pub _type: Type,
    /// The id of the group that the connectable component resides in
    #[serde(rename = "groupId")]
    pub group_id: String,
    /// The name of the connectable component
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The comments for the connectable component.
    #[serde(rename = "comments", skip_serializing_if = "Option::is_none")]
    pub comments: Option<String>,
    /// The instance ID of an existing component that is described by this VersionedComponent, or null if this is not mapped to an instantiated component
    #[serde(rename = "instanceIdentifier", skip_serializing_if = "Option::is_none")]
    pub instance_identifier: Option<String>,
}

impl ConnectableComponent {
    pub fn new(id: String, _type: Type, group_id: String) -> ConnectableComponent {
        ConnectableComponent {
            id,
            _type,
            group_id,
            name: None,
            comments: None,
            instance_identifier: None,
        }
    }
}

/// The type of component the connectable is.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "PROCESSOR")]
    PROCESSOR,
    #[serde(rename = "REMOTE_INPUT_PORT")]
    REMOTEINPUTPORT,
    #[serde(rename = "REMOTE_OUTPUT_PORT")]
    REMOTEOUTPUTPORT,
    #[serde(rename = "INPUT_PORT")]
    INPUTPORT,
    #[serde(rename = "OUTPUT_PORT")]
    OUTPUTPORT,
    #[serde(rename = "FUNNEL")]
    FUNNEL,
}

impl Default for Type {
    fn default() -> Type {
        Self::PROCESSOR
    }
}

