/*
 * NiFi Rest API
 *
 * The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: dev@nifi.apache.org
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct FlowConfigurationDto {
    /// Whether this NiFi supports a managed authorizer. Managed authorizers can visualize users, groups, and policies in the UI.
    #[serde(rename = "supportsManagedAuthorizer", skip_serializing_if = "Option::is_none")]
    pub supports_managed_authorizer: Option<bool>,
    /// Whether this NiFi supports a configurable authorizer.
    #[serde(rename = "supportsConfigurableAuthorizer", skip_serializing_if = "Option::is_none")]
    pub supports_configurable_authorizer: Option<bool>,
    /// Whether this NiFi supports configurable users and groups.
    #[serde(rename = "supportsConfigurableUsersAndGroups", skip_serializing_if = "Option::is_none")]
    pub supports_configurable_users_and_groups: Option<bool>,
    /// The interval in seconds between the automatic NiFi refresh requests.
    #[serde(rename = "autoRefreshIntervalSeconds", skip_serializing_if = "Option::is_none")]
    pub auto_refresh_interval_seconds: Option<i64>,
    /// The current time on the system.
    #[serde(rename = "currentTime", skip_serializing_if = "Option::is_none")]
    pub current_time: Option<String>,
    /// The time offset of the system.
    #[serde(rename = "timeOffset", skip_serializing_if = "Option::is_none")]
    pub time_offset: Option<i32>,
    /// The default back pressure object threshold.
    #[serde(rename = "defaultBackPressureObjectThreshold", skip_serializing_if = "Option::is_none")]
    pub default_back_pressure_object_threshold: Option<i64>,
    /// The default back pressure data size threshold.
    #[serde(rename = "defaultBackPressureDataSizeThreshold", skip_serializing_if = "Option::is_none")]
    pub default_back_pressure_data_size_threshold: Option<String>,
}

impl FlowConfigurationDto {
    pub fn new() -> FlowConfigurationDto {
        FlowConfigurationDto {
            supports_managed_authorizer: None,
            supports_configurable_authorizer: None,
            supports_configurable_users_and_groups: None,
            auto_refresh_interval_seconds: None,
            current_time: None,
            time_offset: None,
            default_back_pressure_object_threshold: None,
            default_back_pressure_data_size_threshold: None,
        }
    }
}


