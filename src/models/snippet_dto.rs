/*
 * NiFi Rest API
 *
 * The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: dev@nifi.apache.org
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct SnippetDto {
    /// The id of the snippet.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The URI of the snippet.
    #[serde(rename = "uri", skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
    /// The group id for the components in the snippet.
    #[serde(rename = "parentGroupId", skip_serializing_if = "Option::is_none")]
    pub parent_group_id: Option<String>,
    /// The ids of the process groups in this snippet. These ids will be populated within each response. They can be specified when creating a snippet. However, once a snippet has been created its contents cannot be modified (these ids are ignored during update requests).
    #[serde(rename = "processGroups", skip_serializing_if = "Option::is_none")]
    pub process_groups: Option<::std::collections::HashMap<String, crate::models::RevisionDto>>,
    /// The ids of the remote process groups in this snippet. These ids will be populated within each response. They can be specified when creating a snippet. However, once a snippet has been created its contents cannot be modified (these ids are ignored during update requests).
    #[serde(rename = "remoteProcessGroups", skip_serializing_if = "Option::is_none")]
    pub remote_process_groups: Option<::std::collections::HashMap<String, crate::models::RevisionDto>>,
    /// The ids of the processors in this snippet. These ids will be populated within each response. They can be specified when creating a snippet. However, once a snippet has been created its contents cannot be modified (these ids are ignored during update requests).
    #[serde(rename = "processors", skip_serializing_if = "Option::is_none")]
    pub processors: Option<::std::collections::HashMap<String, crate::models::RevisionDto>>,
    /// The ids of the input ports in this snippet. These ids will be populated within each response. They can be specified when creating a snippet. However, once a snippet has been created its contents cannot be modified (these ids are ignored during update requests).
    #[serde(rename = "inputPorts", skip_serializing_if = "Option::is_none")]
    pub input_ports: Option<::std::collections::HashMap<String, crate::models::RevisionDto>>,
    /// The ids of the output ports in this snippet. These ids will be populated within each response. They can be specified when creating a snippet. However, once a snippet has been created its contents cannot be modified (these ids are ignored during update requests).
    #[serde(rename = "outputPorts", skip_serializing_if = "Option::is_none")]
    pub output_ports: Option<::std::collections::HashMap<String, crate::models::RevisionDto>>,
    /// The ids of the connections in this snippet. These ids will be populated within each response. They can be specified when creating a snippet. However, once a snippet has been created its contents cannot be modified (these ids are ignored during update requests).
    #[serde(rename = "connections", skip_serializing_if = "Option::is_none")]
    pub connections: Option<::std::collections::HashMap<String, crate::models::RevisionDto>>,
    /// The ids of the labels in this snippet. These ids will be populated within each response. They can be specified when creating a snippet. However, once a snippet has been created its contents cannot be modified (these ids are ignored during update requests).
    #[serde(rename = "labels", skip_serializing_if = "Option::is_none")]
    pub labels: Option<::std::collections::HashMap<String, crate::models::RevisionDto>>,
    /// The ids of the funnels in this snippet. These ids will be populated within each response. They can be specified when creating a snippet. However, once a snippet has been created its contents cannot be modified (these ids are ignored during update requests).
    #[serde(rename = "funnels", skip_serializing_if = "Option::is_none")]
    pub funnels: Option<::std::collections::HashMap<String, crate::models::RevisionDto>>,
}

impl SnippetDto {
    pub fn new() -> SnippetDto {
        SnippetDto {
            id: None,
            uri: None,
            parent_group_id: None,
            process_groups: None,
            remote_process_groups: None,
            processors: None,
            input_ports: None,
            output_ports: None,
            connections: None,
            labels: None,
            funnels: None,
        }
    }
}


