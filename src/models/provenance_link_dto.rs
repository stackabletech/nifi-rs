/*
 * NiFi Rest API
 *
 * The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: dev@nifi.apache.org
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ProvenanceLinkDto {
    /// The source node id of the link.
    #[serde(rename = "sourceId", skip_serializing_if = "Option::is_none")]
    pub source_id: Option<String>,
    /// The target node id of the link.
    #[serde(rename = "targetId", skip_serializing_if = "Option::is_none")]
    pub target_id: Option<String>,
    /// The flowfile uuid that traversed the link.
    #[serde(rename = "flowFileUuid", skip_serializing_if = "Option::is_none")]
    pub flow_file_uuid: Option<String>,
    /// The timestamp of the link (based on the destination).
    #[serde(rename = "timestamp", skip_serializing_if = "Option::is_none")]
    pub timestamp: Option<String>,
    /// The timestamp of this link in milliseconds.
    #[serde(rename = "millis", skip_serializing_if = "Option::is_none")]
    pub millis: Option<i64>,
}

impl ProvenanceLinkDto {
    pub fn new() -> ProvenanceLinkDto {
        ProvenanceLinkDto {
            source_id: None,
            target_id: None,
            flow_file_uuid: None,
            timestamp: None,
            millis: None,
        }
    }
}


