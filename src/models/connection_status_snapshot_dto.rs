/*
 * NiFi Rest API
 *
 * The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: dev@nifi.apache.org
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ConnectionStatusSnapshotDto {
    /// The id of the connection.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The id of the process group the connection belongs to.
    #[serde(rename = "groupId", skip_serializing_if = "Option::is_none")]
    pub group_id: Option<String>,
    /// The name of the connection.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The id of the source of the connection.
    #[serde(rename = "sourceId", skip_serializing_if = "Option::is_none")]
    pub source_id: Option<String>,
    /// The name of the source of the connection.
    #[serde(rename = "sourceName", skip_serializing_if = "Option::is_none")]
    pub source_name: Option<String>,
    /// The id of the destination of the connection.
    #[serde(rename = "destinationId", skip_serializing_if = "Option::is_none")]
    pub destination_id: Option<String>,
    /// The name of the destination of the connection.
    #[serde(rename = "destinationName", skip_serializing_if = "Option::is_none")]
    pub destination_name: Option<String>,
    #[serde(rename = "predictions", skip_serializing_if = "Option::is_none")]
    pub predictions: Option<Box<crate::models::ConnectionStatusPredictionsSnapshotDto>>,
    /// The number of FlowFiles that have come into the connection in the last 5 minutes.
    #[serde(rename = "flowFilesIn", skip_serializing_if = "Option::is_none")]
    pub flow_files_in: Option<i32>,
    /// The size of the FlowFiles that have come into the connection in the last 5 minutes.
    #[serde(rename = "bytesIn", skip_serializing_if = "Option::is_none")]
    pub bytes_in: Option<i64>,
    /// The input count/size for the connection in the last 5 minutes, pretty printed.
    #[serde(rename = "input", skip_serializing_if = "Option::is_none")]
    pub input: Option<String>,
    /// The number of FlowFiles that have left the connection in the last 5 minutes.
    #[serde(rename = "flowFilesOut", skip_serializing_if = "Option::is_none")]
    pub flow_files_out: Option<i32>,
    /// The number of bytes that have left the connection in the last 5 minutes.
    #[serde(rename = "bytesOut", skip_serializing_if = "Option::is_none")]
    pub bytes_out: Option<i64>,
    /// The output count/sie for the connection in the last 5 minutes, pretty printed.
    #[serde(rename = "output", skip_serializing_if = "Option::is_none")]
    pub output: Option<String>,
    /// The number of FlowFiles that are currently queued in the connection.
    #[serde(rename = "flowFilesQueued", skip_serializing_if = "Option::is_none")]
    pub flow_files_queued: Option<i32>,
    /// The size of the FlowFiles that are currently queued in the connection.
    #[serde(rename = "bytesQueued", skip_serializing_if = "Option::is_none")]
    pub bytes_queued: Option<i64>,
    /// The total count and size of queued flowfiles formatted.
    #[serde(rename = "queued", skip_serializing_if = "Option::is_none")]
    pub queued: Option<String>,
    /// The total size of flowfiles that are queued formatted.
    #[serde(rename = "queuedSize", skip_serializing_if = "Option::is_none")]
    pub queued_size: Option<String>,
    /// The number of flowfiles that are queued, pretty printed.
    #[serde(rename = "queuedCount", skip_serializing_if = "Option::is_none")]
    pub queued_count: Option<String>,
    /// Connection percent use regarding queued flow files count and backpressure threshold if configured.
    #[serde(rename = "percentUseCount", skip_serializing_if = "Option::is_none")]
    pub percent_use_count: Option<i32>,
    /// Connection percent use regarding queued flow files size and backpressure threshold if configured.
    #[serde(rename = "percentUseBytes", skip_serializing_if = "Option::is_none")]
    pub percent_use_bytes: Option<i32>,
    /// The availability of FlowFiles in this connection
    #[serde(rename = "flowFileAvailability", skip_serializing_if = "Option::is_none")]
    pub flow_file_availability: Option<String>,
}

impl ConnectionStatusSnapshotDto {
    pub fn new() -> ConnectionStatusSnapshotDto {
        ConnectionStatusSnapshotDto {
            id: None,
            group_id: None,
            name: None,
            source_id: None,
            source_name: None,
            destination_id: None,
            destination_name: None,
            predictions: None,
            flow_files_in: None,
            bytes_in: None,
            input: None,
            flow_files_out: None,
            bytes_out: None,
            output: None,
            flow_files_queued: None,
            bytes_queued: None,
            queued: None,
            queued_size: None,
            queued_count: None,
            percent_use_count: None,
            percent_use_bytes: None,
            flow_file_availability: None,
        }
    }
}


