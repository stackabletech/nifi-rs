/*
 * NiFi Rest API
 *
 * The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: dev@nifi.apache.org
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ListingRequestDto {
    /// The id for this listing request.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The URI for future requests to this listing request.
    #[serde(rename = "uri", skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
    /// The timestamp when the query was submitted.
    #[serde(rename = "submissionTime", skip_serializing_if = "Option::is_none")]
    pub submission_time: Option<String>,
    /// The last time this listing request was updated.
    #[serde(rename = "lastUpdated", skip_serializing_if = "Option::is_none")]
    pub last_updated: Option<String>,
    /// The current percent complete.
    #[serde(rename = "percentCompleted", skip_serializing_if = "Option::is_none")]
    pub percent_completed: Option<i32>,
    /// Whether the query has finished.
    #[serde(rename = "finished", skip_serializing_if = "Option::is_none")]
    pub finished: Option<bool>,
    /// The reason, if any, that this listing request failed.
    #[serde(rename = "failureReason", skip_serializing_if = "Option::is_none")]
    pub failure_reason: Option<String>,
    /// The maximum number of FlowFileSummary objects to return
    #[serde(rename = "maxResults", skip_serializing_if = "Option::is_none")]
    pub max_results: Option<i32>,
    /// The current state of the listing request.
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
    #[serde(rename = "queueSize", skip_serializing_if = "Option::is_none")]
    pub queue_size: Option<Box<crate::models::QueueSizeDto>>,
    /// The FlowFile summaries. The summaries will be populated once the request has completed.
    #[serde(rename = "flowFileSummaries", skip_serializing_if = "Option::is_none")]
    pub flow_file_summaries: Option<Vec<crate::models::FlowFileSummaryDto>>,
    /// Whether the source of the connection is running
    #[serde(rename = "sourceRunning", skip_serializing_if = "Option::is_none")]
    pub source_running: Option<bool>,
    /// Whether the destination of the connection is running
    #[serde(rename = "destinationRunning", skip_serializing_if = "Option::is_none")]
    pub destination_running: Option<bool>,
}

impl ListingRequestDto {
    pub fn new() -> ListingRequestDto {
        ListingRequestDto {
            id: None,
            uri: None,
            submission_time: None,
            last_updated: None,
            percent_completed: None,
            finished: None,
            failure_reason: None,
            max_results: None,
            state: None,
            queue_size: None,
            flow_file_summaries: None,
            source_running: None,
            destination_running: None,
        }
    }
}


