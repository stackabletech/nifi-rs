/*
 * NiFi Rest API
 *
 * The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: dev@nifi.apache.org
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ReportingTaskDto {
    /// The id of the component.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The ID of the corresponding component that is under version control
    #[serde(rename = "versionedComponentId", skip_serializing_if = "Option::is_none")]
    pub versioned_component_id: Option<String>,
    /// The id of parent process group of this component if applicable.
    #[serde(rename = "parentGroupId", skip_serializing_if = "Option::is_none")]
    pub parent_group_id: Option<String>,
    #[serde(rename = "position", skip_serializing_if = "Option::is_none")]
    pub position: Option<Box<crate::models::PositionDto>>,
    /// The name of the reporting task.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The fully qualified type of the reporting task.
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub _type: Option<String>,
    #[serde(rename = "bundle", skip_serializing_if = "Option::is_none")]
    pub bundle: Option<Box<crate::models::BundleDto>>,
    /// The state of the reporting task.
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<State>,
    /// The comments of the reporting task.
    #[serde(rename = "comments", skip_serializing_if = "Option::is_none")]
    pub comments: Option<String>,
    /// Whether the reporting task persists state.
    #[serde(rename = "persistsState", skip_serializing_if = "Option::is_none")]
    pub persists_state: Option<bool>,
    /// Whether the reporting task requires elevated privileges.
    #[serde(rename = "restricted", skip_serializing_if = "Option::is_none")]
    pub restricted: Option<bool>,
    /// Whether the reporting task has been deprecated.
    #[serde(rename = "deprecated", skip_serializing_if = "Option::is_none")]
    pub deprecated: Option<bool>,
    /// Whether the reporting task has multiple versions available.
    #[serde(rename = "multipleVersionsAvailable", skip_serializing_if = "Option::is_none")]
    pub multiple_versions_available: Option<bool>,
    /// The frequency with which to schedule the reporting task. The format of the value willd epend on the valud of the schedulingStrategy.
    #[serde(rename = "schedulingPeriod", skip_serializing_if = "Option::is_none")]
    pub scheduling_period: Option<String>,
    /// The scheduling strategy that determines how the schedulingPeriod value should be interpreted.
    #[serde(rename = "schedulingStrategy", skip_serializing_if = "Option::is_none")]
    pub scheduling_strategy: Option<String>,
    /// The default scheduling period for the different scheduling strategies.
    #[serde(rename = "defaultSchedulingPeriod", skip_serializing_if = "Option::is_none")]
    pub default_scheduling_period: Option<::std::collections::HashMap<String, String>>,
    /// The properties of the reporting task.
    #[serde(rename = "properties", skip_serializing_if = "Option::is_none")]
    pub properties: Option<::std::collections::HashMap<String, String>>,
    /// The descriptors for the reporting tasks properties.
    #[serde(rename = "descriptors", skip_serializing_if = "Option::is_none")]
    pub descriptors: Option<::std::collections::HashMap<String, crate::models::PropertyDescriptorDto>>,
    /// The URL for the custom configuration UI for the reporting task.
    #[serde(rename = "customUiUrl", skip_serializing_if = "Option::is_none")]
    pub custom_ui_url: Option<String>,
    /// The annotation data for the repoting task. This is how the custom UI relays configuration to the reporting task.
    #[serde(rename = "annotationData", skip_serializing_if = "Option::is_none")]
    pub annotation_data: Option<String>,
    /// Gets the validation errors from the reporting task. These validation errors represent the problems with the reporting task that must be resolved before it can be scheduled to run.
    #[serde(rename = "validationErrors", skip_serializing_if = "Option::is_none")]
    pub validation_errors: Option<Vec<String>>,
    /// Indicates whether the Processor is valid, invalid, or still in the process of validating (i.e., it is unknown whether or not the Processor is valid)
    #[serde(rename = "validationStatus", skip_serializing_if = "Option::is_none")]
    pub validation_status: Option<ValidationStatus>,
    /// The number of active threads for the reporting task.
    #[serde(rename = "activeThreadCount", skip_serializing_if = "Option::is_none")]
    pub active_thread_count: Option<i32>,
    /// Whether the underlying extension is missing.
    #[serde(rename = "extensionMissing", skip_serializing_if = "Option::is_none")]
    pub extension_missing: Option<bool>,
}

impl ReportingTaskDto {
    pub fn new() -> ReportingTaskDto {
        ReportingTaskDto {
            id: None,
            versioned_component_id: None,
            parent_group_id: None,
            position: None,
            name: None,
            _type: None,
            bundle: None,
            state: None,
            comments: None,
            persists_state: None,
            restricted: None,
            deprecated: None,
            multiple_versions_available: None,
            scheduling_period: None,
            scheduling_strategy: None,
            default_scheduling_period: None,
            properties: None,
            descriptors: None,
            custom_ui_url: None,
            annotation_data: None,
            validation_errors: None,
            validation_status: None,
            active_thread_count: None,
            extension_missing: None,
        }
    }
}

/// The state of the reporting task.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum State {
    #[serde(rename = "RUNNING")]
    RUNNING,
    #[serde(rename = "STOPPED")]
    STOPPED,
    #[serde(rename = "DISABLED")]
    DISABLED,
}

impl Default for State {
    fn default() -> State {
        Self::RUNNING
    }
}
/// Indicates whether the Processor is valid, invalid, or still in the process of validating (i.e., it is unknown whether or not the Processor is valid)
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ValidationStatus {
    #[serde(rename = "VALID")]
    VALID,
    #[serde(rename = "INVALID")]
    INVALID,
    #[serde(rename = "VALIDATING")]
    VALIDATING,
}

impl Default for ValidationStatus {
    fn default() -> ValidationStatus {
        Self::VALID
    }
}

