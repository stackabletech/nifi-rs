/*
 * NiFi Rest API
 *
 * The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: dev@nifi.apache.org
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct NodeDto {
    /// The id of the node.
    #[serde(rename = "nodeId", skip_serializing_if = "Option::is_none")]
    pub node_id: Option<String>,
    /// The node's host/ip address.
    #[serde(rename = "address", skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
    /// The port the node is listening for API requests.
    #[serde(rename = "apiPort", skip_serializing_if = "Option::is_none")]
    pub api_port: Option<i32>,
    /// The node's status.
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    /// the time of the nodes's last heartbeat.
    #[serde(rename = "heartbeat", skip_serializing_if = "Option::is_none")]
    pub heartbeat: Option<String>,
    /// The time of the node's last connection request.
    #[serde(rename = "connectionRequested", skip_serializing_if = "Option::is_none")]
    pub connection_requested: Option<String>,
    /// The roles of this node.
    #[serde(rename = "roles", skip_serializing_if = "Option::is_none")]
    pub roles: Option<Vec<String>>,
    /// The active threads for the NiFi on the node.
    #[serde(rename = "activeThreadCount", skip_serializing_if = "Option::is_none")]
    pub active_thread_count: Option<i32>,
    /// The queue the NiFi on the node.
    #[serde(rename = "queued", skip_serializing_if = "Option::is_none")]
    pub queued: Option<String>,
    /// The node's events.
    #[serde(rename = "events", skip_serializing_if = "Option::is_none")]
    pub events: Option<Vec<crate::models::NodeEventDto>>,
    /// The time at which this Node was last refreshed.
    #[serde(rename = "nodeStartTime", skip_serializing_if = "Option::is_none")]
    pub node_start_time: Option<String>,
}

impl NodeDto {
    pub fn new() -> NodeDto {
        NodeDto {
            node_id: None,
            address: None,
            api_port: None,
            status: None,
            heartbeat: None,
            connection_requested: None,
            roles: None,
            active_thread_count: None,
            queued: None,
            events: None,
            node_start_time: None,
        }
    }
}


