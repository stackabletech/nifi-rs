/*
 * NiFi Rest API
 *
 * The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: dev@nifi.apache.org
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ConnectionEntity {
    #[serde(rename = "revision", skip_serializing_if = "Option::is_none")]
    pub revision: Option<Box<crate::models::RevisionDto>>,
    /// The id of the component.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The URI for futures requests to the component.
    #[serde(rename = "uri", skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
    #[serde(rename = "position", skip_serializing_if = "Option::is_none")]
    pub position: Option<Box<crate::models::PositionDto>>,
    #[serde(rename = "permissions", skip_serializing_if = "Option::is_none")]
    pub permissions: Option<Box<crate::models::PermissionsDto>>,
    /// The bulletins for this component.
    #[serde(rename = "bulletins", skip_serializing_if = "Option::is_none")]
    pub bulletins: Option<Vec<crate::models::BulletinEntity>>,
    /// Acknowledges that this node is disconnected to allow for mutable requests to proceed.
    #[serde(rename = "disconnectedNodeAcknowledged", skip_serializing_if = "Option::is_none")]
    pub disconnected_node_acknowledged: Option<bool>,
    #[serde(rename = "component", skip_serializing_if = "Option::is_none")]
    pub component: Option<Box<crate::models::ConnectionDto>>,
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<Box<crate::models::ConnectionStatusDto>>,
    /// The bend points on the connection.
    #[serde(rename = "bends", skip_serializing_if = "Option::is_none")]
    pub bends: Option<Vec<crate::models::PositionDto>>,
    /// The index of the bend point where to place the connection label.
    #[serde(rename = "labelIndex", skip_serializing_if = "Option::is_none")]
    pub label_index: Option<i32>,
    /// The z index of the connection.
    #[serde(rename = "getzIndex", skip_serializing_if = "Option::is_none")]
    pub getz_index: Option<i64>,
    /// The identifier of the source of this connection.
    #[serde(rename = "sourceId", skip_serializing_if = "Option::is_none")]
    pub source_id: Option<String>,
    /// The identifier of the group of the source of this connection.
    #[serde(rename = "sourceGroupId", skip_serializing_if = "Option::is_none")]
    pub source_group_id: Option<String>,
    /// The type of component the source connectable is.
    #[serde(rename = "sourceType")]
    pub source_type: SourceType,
    /// The identifier of the destination of this connection.
    #[serde(rename = "destinationId", skip_serializing_if = "Option::is_none")]
    pub destination_id: Option<String>,
    /// The identifier of the group of the destination of this connection.
    #[serde(rename = "destinationGroupId", skip_serializing_if = "Option::is_none")]
    pub destination_group_id: Option<String>,
    /// The type of component the destination connectable is.
    #[serde(rename = "destinationType")]
    pub destination_type: DestinationType,
}

impl ConnectionEntity {
    pub fn new(source_type: SourceType, destination_type: DestinationType) -> ConnectionEntity {
        ConnectionEntity {
            revision: None,
            id: None,
            uri: None,
            position: None,
            permissions: None,
            bulletins: None,
            disconnected_node_acknowledged: None,
            component: None,
            status: None,
            bends: None,
            label_index: None,
            getz_index: None,
            source_id: None,
            source_group_id: None,
            source_type,
            destination_id: None,
            destination_group_id: None,
            destination_type,
        }
    }
}

/// The type of component the source connectable is.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SourceType {
    #[serde(rename = "PROCESSOR")]
    PROCESSOR,
    #[serde(rename = "REMOTE_INPUT_PORT")]
    REMOTEINPUTPORT,
    #[serde(rename = "REMOTE_OUTPUT_PORT")]
    REMOTEOUTPUTPORT,
    #[serde(rename = "INPUT_PORT")]
    INPUTPORT,
    #[serde(rename = "OUTPUT_PORT")]
    OUTPUTPORT,
    #[serde(rename = "FUNNEL")]
    FUNNEL,
}

impl Default for SourceType {
    fn default() -> SourceType {
        Self::PROCESSOR
    }
}
/// The type of component the destination connectable is.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum DestinationType {
    #[serde(rename = "PROCESSOR")]
    PROCESSOR,
    #[serde(rename = "REMOTE_INPUT_PORT")]
    REMOTEINPUTPORT,
    #[serde(rename = "REMOTE_OUTPUT_PORT")]
    REMOTEOUTPUTPORT,
    #[serde(rename = "INPUT_PORT")]
    INPUTPORT,
    #[serde(rename = "OUTPUT_PORT")]
    OUTPUTPORT,
    #[serde(rename = "FUNNEL")]
    FUNNEL,
}

impl Default for DestinationType {
    fn default() -> DestinationType {
        Self::PROCESSOR
    }
}

