/*
 * NiFi Rest API
 *
 * The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: dev@nifi.apache.org
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ComponentDifferenceDto {
    /// The type of component
    #[serde(rename = "componentType", skip_serializing_if = "Option::is_none")]
    pub component_type: Option<String>,
    /// The ID of the component
    #[serde(rename = "componentId", skip_serializing_if = "Option::is_none")]
    pub component_id: Option<String>,
    /// The name of the component
    #[serde(rename = "componentName", skip_serializing_if = "Option::is_none")]
    pub component_name: Option<String>,
    /// The ID of the Process Group that the component belongs to
    #[serde(rename = "processGroupId", skip_serializing_if = "Option::is_none")]
    pub process_group_id: Option<String>,
    /// The differences in the component between the two flows
    #[serde(rename = "differences", skip_serializing_if = "Option::is_none")]
    pub differences: Option<Vec<crate::models::DifferenceDto>>,
}

impl ComponentDifferenceDto {
    pub fn new() -> ComponentDifferenceDto {
        ComponentDifferenceDto {
            component_type: None,
            component_id: None,
            component_name: None,
            process_group_id: None,
            differences: None,
        }
    }
}


