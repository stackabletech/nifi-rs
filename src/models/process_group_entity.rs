/*
 * NiFi Rest API
 *
 * The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: dev@nifi.apache.org
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ProcessGroupEntity {
    #[serde(rename = "revision", skip_serializing_if = "Option::is_none")]
    pub revision: Option<Box<crate::models::RevisionDto>>,
    /// The id of the component.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The URI for futures requests to the component.
    #[serde(rename = "uri", skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
    #[serde(rename = "position", skip_serializing_if = "Option::is_none")]
    pub position: Option<Box<crate::models::PositionDto>>,
    #[serde(rename = "permissions", skip_serializing_if = "Option::is_none")]
    pub permissions: Option<Box<crate::models::PermissionsDto>>,
    /// The bulletins for this component.
    #[serde(rename = "bulletins", skip_serializing_if = "Option::is_none")]
    pub bulletins: Option<Vec<crate::models::BulletinEntity>>,
    /// Acknowledges that this node is disconnected to allow for mutable requests to proceed.
    #[serde(rename = "disconnectedNodeAcknowledged", skip_serializing_if = "Option::is_none")]
    pub disconnected_node_acknowledged: Option<bool>,
    #[serde(rename = "component", skip_serializing_if = "Option::is_none")]
    pub component: Option<Box<crate::models::ProcessGroupDto>>,
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<Box<crate::models::ProcessGroupStatusDto>>,
    #[serde(rename = "versionedFlowSnapshot", skip_serializing_if = "Option::is_none")]
    pub versioned_flow_snapshot: Option<Box<crate::models::VersionedFlowSnapshot>>,
    /// The number of running components in this process group.
    #[serde(rename = "runningCount", skip_serializing_if = "Option::is_none")]
    pub running_count: Option<i32>,
    /// The number of stopped components in the process group.
    #[serde(rename = "stoppedCount", skip_serializing_if = "Option::is_none")]
    pub stopped_count: Option<i32>,
    /// The number of invalid components in the process group.
    #[serde(rename = "invalidCount", skip_serializing_if = "Option::is_none")]
    pub invalid_count: Option<i32>,
    /// The number of disabled components in the process group.
    #[serde(rename = "disabledCount", skip_serializing_if = "Option::is_none")]
    pub disabled_count: Option<i32>,
    /// The number of active remote ports in the process group.
    #[serde(rename = "activeRemotePortCount", skip_serializing_if = "Option::is_none")]
    pub active_remote_port_count: Option<i32>,
    /// The number of inactive remote ports in the process group.
    #[serde(rename = "inactiveRemotePortCount", skip_serializing_if = "Option::is_none")]
    pub inactive_remote_port_count: Option<i32>,
    /// The current state of the Process Group, as it relates to the Versioned Flow
    #[serde(rename = "versionedFlowState", skip_serializing_if = "Option::is_none")]
    pub versioned_flow_state: Option<VersionedFlowState>,
    /// The number of up to date versioned process groups in the process group.
    #[serde(rename = "upToDateCount", skip_serializing_if = "Option::is_none")]
    pub up_to_date_count: Option<i32>,
    /// The number of locally modified versioned process groups in the process group.
    #[serde(rename = "locallyModifiedCount", skip_serializing_if = "Option::is_none")]
    pub locally_modified_count: Option<i32>,
    /// The number of stale versioned process groups in the process group.
    #[serde(rename = "staleCount", skip_serializing_if = "Option::is_none")]
    pub stale_count: Option<i32>,
    /// The number of locally modified and stale versioned process groups in the process group.
    #[serde(rename = "locallyModifiedAndStaleCount", skip_serializing_if = "Option::is_none")]
    pub locally_modified_and_stale_count: Option<i32>,
    /// The number of versioned process groups in the process group that are unable to sync to a registry.
    #[serde(rename = "syncFailureCount", skip_serializing_if = "Option::is_none")]
    pub sync_failure_count: Option<i32>,
    /// The number of local input ports in the process group.
    #[serde(rename = "localInputPortCount", skip_serializing_if = "Option::is_none")]
    pub local_input_port_count: Option<i32>,
    /// The number of local output ports in the process group.
    #[serde(rename = "localOutputPortCount", skip_serializing_if = "Option::is_none")]
    pub local_output_port_count: Option<i32>,
    /// The number of public input ports in the process group.
    #[serde(rename = "publicInputPortCount", skip_serializing_if = "Option::is_none")]
    pub public_input_port_count: Option<i32>,
    /// The number of public output ports in the process group.
    #[serde(rename = "publicOutputPortCount", skip_serializing_if = "Option::is_none")]
    pub public_output_port_count: Option<i32>,
    #[serde(rename = "parameterContext", skip_serializing_if = "Option::is_none")]
    pub parameter_context: Option<Box<crate::models::ParameterContextReferenceEntity>>,
    /// The number of input ports in the process group.
    #[serde(rename = "inputPortCount", skip_serializing_if = "Option::is_none")]
    pub input_port_count: Option<i32>,
    /// The number of output ports in the process group.
    #[serde(rename = "outputPortCount", skip_serializing_if = "Option::is_none")]
    pub output_port_count: Option<i32>,
}

impl ProcessGroupEntity {
    pub fn new() -> ProcessGroupEntity {
        ProcessGroupEntity {
            revision: None,
            id: None,
            uri: None,
            position: None,
            permissions: None,
            bulletins: None,
            disconnected_node_acknowledged: None,
            component: None,
            status: None,
            versioned_flow_snapshot: None,
            running_count: None,
            stopped_count: None,
            invalid_count: None,
            disabled_count: None,
            active_remote_port_count: None,
            inactive_remote_port_count: None,
            versioned_flow_state: None,
            up_to_date_count: None,
            locally_modified_count: None,
            stale_count: None,
            locally_modified_and_stale_count: None,
            sync_failure_count: None,
            local_input_port_count: None,
            local_output_port_count: None,
            public_input_port_count: None,
            public_output_port_count: None,
            parameter_context: None,
            input_port_count: None,
            output_port_count: None,
        }
    }
}

/// The current state of the Process Group, as it relates to the Versioned Flow
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum VersionedFlowState {
    #[serde(rename = "LOCALLY_MODIFIED")]
    LOCALLYMODIFIED,
    #[serde(rename = "STALE")]
    STALE,
    #[serde(rename = "LOCALLY_MODIFIED_AND_STALE")]
    LOCALLYMODIFIEDANDSTALE,
    #[serde(rename = "UP_TO_DATE")]
    UPTODATE,
    #[serde(rename = "SYNC_FAILURE")]
    SYNCFAILURE,
}

impl Default for VersionedFlowState {
    fn default() -> VersionedFlowState {
        Self::LOCALLYMODIFIED
    }
}

