/*
 * NiFi Rest API
 *
 * The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: dev@nifi.apache.org
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct LineageRequestDto {
    /// The event id that was used to generate this lineage, if applicable. The event id is allowed for any type of lineageRequestType. If the lineageRequestType is FLOWFILE and the flowfile uuid is also included in the request, the event id will be ignored.
    #[serde(rename = "eventId", skip_serializing_if = "Option::is_none")]
    pub event_id: Option<i64>,
    /// The type of lineage request. PARENTS will return the lineage for the flowfiles that are parents of the specified event. CHILDREN will return the lineage for the flowfiles that are children of the specified event. FLOWFILE will return the lineage for the specified flowfile.
    #[serde(rename = "lineageRequestType", skip_serializing_if = "Option::is_none")]
    pub lineage_request_type: Option<LineageRequestType>,
    /// The flowfile uuid that was used to generate the lineage. The flowfile uuid is only allowed when the lineageRequestType is FLOWFILE and will take precedence over event id.
    #[serde(rename = "uuid", skip_serializing_if = "Option::is_none")]
    pub uuid: Option<String>,
    /// The id of the node where this lineage originated if clustered.
    #[serde(rename = "clusterNodeId", skip_serializing_if = "Option::is_none")]
    pub cluster_node_id: Option<String>,
}

impl LineageRequestDto {
    pub fn new() -> LineageRequestDto {
        LineageRequestDto {
            event_id: None,
            lineage_request_type: None,
            uuid: None,
            cluster_node_id: None,
        }
    }
}

/// The type of lineage request. PARENTS will return the lineage for the flowfiles that are parents of the specified event. CHILDREN will return the lineage for the flowfiles that are children of the specified event. FLOWFILE will return the lineage for the specified flowfile.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum LineageRequestType {
    #[serde(rename = "PARENTS")]
    PARENTS,
    #[serde(rename = "CHILDREN")]
    CHILDREN,
    #[serde(rename = "and FLOWFILE")]
    AndFLOWFILE,
}

impl Default for LineageRequestType {
    fn default() -> LineageRequestType {
        Self::PARENTS
    }
}

