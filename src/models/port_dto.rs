/*
 * NiFi Rest API
 *
 * The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: dev@nifi.apache.org
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct PortDto {
    /// The id of the component.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The ID of the corresponding component that is under version control
    #[serde(rename = "versionedComponentId", skip_serializing_if = "Option::is_none")]
    pub versioned_component_id: Option<String>,
    /// The id of parent process group of this component if applicable.
    #[serde(rename = "parentGroupId", skip_serializing_if = "Option::is_none")]
    pub parent_group_id: Option<String>,
    #[serde(rename = "position", skip_serializing_if = "Option::is_none")]
    pub position: Option<Box<crate::models::PositionDto>>,
    /// The name of the port.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The comments for the port.
    #[serde(rename = "comments", skip_serializing_if = "Option::is_none")]
    pub comments: Option<String>,
    /// The state of the port.
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<State>,
    /// The type of port.
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub _type: Option<Type>,
    /// Whether the port has incoming or output connections to a remote NiFi. This is only applicable when the port is allowed to be accessed remotely.
    #[serde(rename = "transmitting", skip_serializing_if = "Option::is_none")]
    pub transmitting: Option<bool>,
    /// The number of tasks that should be concurrently scheduled for the port.
    #[serde(rename = "concurrentlySchedulableTaskCount", skip_serializing_if = "Option::is_none")]
    pub concurrently_schedulable_task_count: Option<i32>,
    /// The users that are allowed to access the port.
    #[serde(rename = "userAccessControl", skip_serializing_if = "Option::is_none")]
    pub user_access_control: Option<Vec<String>>,
    /// The user groups that are allowed to access the port.
    #[serde(rename = "groupAccessControl", skip_serializing_if = "Option::is_none")]
    pub group_access_control: Option<Vec<String>>,
    /// Whether this port can be accessed remotely via Site-to-Site protocol.
    #[serde(rename = "allowRemoteAccess", skip_serializing_if = "Option::is_none")]
    pub allow_remote_access: Option<bool>,
    /// Gets the validation errors from this port. These validation errors represent the problems with the port that must be resolved before it can be started.
    #[serde(rename = "validationErrors", skip_serializing_if = "Option::is_none")]
    pub validation_errors: Option<Vec<String>>,
}

impl PortDto {
    pub fn new() -> PortDto {
        PortDto {
            id: None,
            versioned_component_id: None,
            parent_group_id: None,
            position: None,
            name: None,
            comments: None,
            state: None,
            _type: None,
            transmitting: None,
            concurrently_schedulable_task_count: None,
            user_access_control: None,
            group_access_control: None,
            allow_remote_access: None,
            validation_errors: None,
        }
    }
}

/// The state of the port.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum State {
    #[serde(rename = "RUNNING")]
    RUNNING,
    #[serde(rename = "STOPPED")]
    STOPPED,
    #[serde(rename = "DISABLED")]
    DISABLED,
}

impl Default for State {
    fn default() -> State {
        Self::RUNNING
    }
}
/// The type of port.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "INPUT_PORT")]
    INPUTPORT,
    #[serde(rename = "OUTPUT_PORT")]
    OUTPUTPORT,
}

impl Default for Type {
    fn default() -> Type {
        Self::INPUTPORT
    }
}

