/*
 * NiFi Rest API
 *
 * The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: dev@nifi.apache.org
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct UserGroupDto {
    /// The id of the component.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The ID of the corresponding component that is under version control
    #[serde(rename = "versionedComponentId", skip_serializing_if = "Option::is_none")]
    pub versioned_component_id: Option<String>,
    /// The id of parent process group of this component if applicable.
    #[serde(rename = "parentGroupId", skip_serializing_if = "Option::is_none")]
    pub parent_group_id: Option<String>,
    #[serde(rename = "position", skip_serializing_if = "Option::is_none")]
    pub position: Option<Box<crate::models::PositionDto>>,
    /// The identity of the tenant.
    #[serde(rename = "identity", skip_serializing_if = "Option::is_none")]
    pub identity: Option<String>,
    /// Whether this tenant is configurable.
    #[serde(rename = "configurable", skip_serializing_if = "Option::is_none")]
    pub configurable: Option<bool>,
    /// The users that belong to the user group.
    #[serde(rename = "users", skip_serializing_if = "Option::is_none")]
    pub users: Option<Vec<crate::models::TenantEntity>>,
    /// The access policies this user group belongs to. This field was incorrectly defined as an AccessPolicyEntity. For compatibility reasons the field will remain of this type, however only the fields that are present in the AccessPolicySummaryEntity will be populated here.
    #[serde(rename = "accessPolicies", skip_serializing_if = "Option::is_none")]
    pub access_policies: Option<Vec<crate::models::AccessPolicyEntity>>,
}

impl UserGroupDto {
    pub fn new() -> UserGroupDto {
        UserGroupDto {
            id: None,
            versioned_component_id: None,
            parent_group_id: None,
            position: None,
            identity: None,
            configurable: None,
            users: None,
            access_policies: None,
        }
    }
}


